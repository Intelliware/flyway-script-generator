-- Create the 'schema_version' table if it doesn't exist
-- Exists to track what changes have been previously applied
CREATE TABLE IF NOT EXISTS "schema_version" 
  (version_rank int NOT NULL,
   installed_rank int NOT NULL,
   version varchar(50) PRIMARY KEY NOT NULL,
   description varchar(200) NOT NULL,
   type varchar(20) NOT NULL,
   script varchar(1000) NOT NULL,
   checksum int,
   installed_by varchar(100) NOT NULL,
   installed_on timestamp DEFAULT now() NOT NULL,
   execution_time int NOT NULL,
   success bool NOT NULL);

-- --------------------------------------------------------------------
-- REVISION: 1.0000
-- --------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS config_response_status (
	id BIGINT PRIMARY KEY,
	client VARCHAR(50) NOT NULL,
	date_received TIMESTAMP NOT NULL,
	published_version VARCHAR(10) NOT NULL,
	consumed_version VARCHAR(10) NOT NULL,
	status VARCHAR (20) NOT NULL
);
CREATE SEQUENCE config_response_status_seq INCREMENT BY 1 START WITH 1 OWNED BY config_response_status.id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0000','Create config response status table','SQL','Major0001/V1.0000__Create_config_response_status_table.sql',-1963562465,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0001
-- --------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS client (
	id BIGINT CONSTRAINT pk_client PRIMARY KEY,
	code VARCHAR(3) NOT NULL,
	name VARCHAR(50) NOT NULL,
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE client_seq INCREMENT BY 1 START WITH 1 OWNED BY client.id;
CREATE TABLE IF NOT EXISTS fund_config (
	id BIGINT CONSTRAINT pk_fund_config PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_trfruleconf_client REFERENCES client (id),
	version VARCHAR(13) NOT NULL DEFAULT 'draft.version',
	source_id BIGINT CONSTRAINT fk_fundcfg_fundcfg REFERENCES fund_config (id),
	config_name VARCHAR(180),	
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE fund_config_seq INCREMENT BY 1 START WITH 1 OWNED BY fund_config.id;
CREATE TABLE IF NOT EXISTS fund (
	id BIGINT CONSTRAINT pk_fund PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_fund_client REFERENCES client (id),
	fund_config_id BIGINT CONSTRAINT fk_fund_fundcfg REFERENCES fund_config (id),
	fund_code VARCHAR(10) NOT NULL,
	name VARCHAR(50) NOT NULL,
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE fund_seq INCREMENT BY 1 START WITH 1 OWNED BY fund.id;
CREATE TABLE IF NOT EXISTS class (
	id BIGINT CONSTRAINT pk_class PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_class_client REFERENCES client (id),
	fund_config_id BIGINT CONSTRAINT fk_class_fundcfg REFERENCES fund_config (id),
	class_code VARCHAR(2) NOT NULL,
	name VARCHAR(8) NOT NULL,
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE class_seq INCREMENT BY 1 START WITH 1 OWNED BY class.id;
CREATE TABLE IF NOT EXISTS fund_class (
	id BIGINT CONSTRAINT pk_fund_class PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_fundclass_client REFERENCES client (id),
	fund_id BIGINT NOT NULL CONSTRAINT fk_fundclass_fund REFERENCES fund (id),
	class_id BIGINT NOT NULL CONSTRAINT fk_fundclass_class REFERENCES class (id),
	fund_config_id BIGINT CONSTRAINT fk_fund_class_fundcfg REFERENCES fund_config (id),
	baycom_number VARCHAR(10) NOT NULL,
	name VARCHAR(50) NOT NULL,
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE fund_class_seq INCREMENT BY 1 START WITH 1 OWNED BY fund_class.id;
CREATE TABLE IF NOT EXISTS transfer_rule_override_type (
	transfer_rule_override_type VARCHAR(15) CONSTRAINT pk_transfer_rule_override_type PRIMARY KEY
); 
INSERT INTO transfer_rule_override_type (transfer_rule_override_type) VALUES ('ALLOWED');
INSERT INTO transfer_rule_override_type (transfer_rule_override_type) VALUES ('DISALLOWED');
INSERT INTO transfer_rule_override_type (transfer_rule_override_type) VALUES ('UNSPECIFIED');
CREATE TABLE IF NOT EXISTS transfer_rule_override (
	id BIGINT CONSTRAINT pk_transfer_rule_override PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_trfrulovride_client REFERENCES client (id),
	fund_config_id BIGINT NOT NULL CONSTRAINT fk_trfrulovride_fundcfg REFERENCES fund_config (id),
	from_fund_class_id BIGINT NOT NULL CONSTRAINT fk_trfrulovride_fundclass_from REFERENCES fund_class (id),
	to_fund_class_id BIGINT NOT NULL CONSTRAINT fk_trfrulovride_fundclass_to REFERENCES fund_class (id),
	transfer_rule_override_type VARCHAR(15) NOT NULL CONSTRAINT fk_trfrulovride_overridetype REFERENCES transfer_rule_override_type (transfer_rule_override_type),
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE transfer_rule_override_seq INCREMENT BY 1 START WITH 1 OWNED BY transfer_rule_override.id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0001','Create allowable transfers tables','SQL','Major0001/V1.0001__Create_allowable_transfers_tables.sql',-521095180,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0002
-- --------------------------------------------------------------------
ALTER TABLE class ADD CONSTRAINT unq_class_clientidclasscode UNIQUE (client_id, fund_config_id, class_code);
ALTER TABLE fund ADD CONSTRAINT unq_fund_clientidfundcode UNIQUE (client_id, fund_config_id, fund_code);
ALTER TABLE fund_class ADD CONSTRAINT unq_fund_class_clientidbaycomnumber UNIQUE (client_id, fund_config_id, baycom_number);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0002','Add constraints to class fund tables','SQL','Major0001/V1.0002__Add_constraints_to_class_fund_tables.sql',-1565223845,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0003
-- --------------------------------------------------------------------
CREATE OR REPLACE VIEW vw_potential_transfer (id, client_id, from_fund_class_id, from_fund_id, from_class_id, to_fund_class_id, to_fund_id, to_class_id) 
	AS
SELECT
	_from.client_id || '|' ||  _from.id || '|' ||  _to.id as id,
	_from.client_id,
	_from.id from_fund_class_id, 
	_from.fund_id from_fund_id, 
	_from.class_id from_class_id, 
	_to.id to_fund_class_id, 
	_to.fund_id to_fund_id, 
	_to.class_id to_class_id
FROM 
	fund_class _from
INNER JOIN
	fund_class _to
ON
	_from.client_id = _to.client_id
;
CREATE OR REPLACE VIEW vwd_potential_transfer (id, client_id, from_fund_class_id, from_fund_code, from_class_code, to_fund_class_id, to_fund_code, to_class_code, transfer_rule_override_type) 
	AS
SELECT
	vpt.client_id || '|' || _from_fund.fund_code || '|' || _from_class.class_code || '|' || _to_fund.fund_code || '|' || _to_class.class_code as id,
	vpt.client_id,
	vpt.from_fund_class_id,
	_from_fund.fund_code,
	_from_class.class_code,
	vpt.to_fund_class_id,
	_to_fund.fund_code,
	_to_class.class_code,
	tro.transfer_rule_override_type
FROM 
	vw_potential_transfer vpt
INNER JOIN
	fund _from_fund
ON
    vpt.from_fund_id = _from_fund.id
INNER JOIN
    fund _to_fund
ON
    vpt.to_fund_id = _to_fund.id        
INNER JOIN
    class _from_class
ON
    vpt.from_class_id = _from_class.id
INNER JOIN
    class _to_class
ON
    vpt.to_class_id = _to_class.id
LEFT JOIN
    transfer_rule_override tro
ON
    vpt.from_fund_class_id = tro.from_fund_class_id
AND vpt.to_fund_class_id = tro.to_fund_class_id
AND vpt.client_id = tro.client_id
;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0003','Create view for potential transfers','SQL','Major0001/V1.0003__Create_view_for_potential_transfers.sql',1429147308,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0004
-- --------------------------------------------------------------------
-- CAT-78, create new enum table
CREATE TABLE IF NOT EXISTS fund_config_status (
	fund_config_status VARCHAR(6) CONSTRAINT pk_fund_config_status PRIMARY KEY
); 
INSERT INTO fund_config_status (fund_config_status) VALUES ('DRAFT');
INSERT INTO fund_config_status (fund_config_status) VALUES ('LOCKED');
-- TODO JAC: can we use a check constraint instead to keep the data model less cluttered
ALTER TABLE fund_config
ADD COLUMN fund_config_status VARCHAR(6) NOT NULL CONSTRAINT fund_config_status REFERENCES fund_config_status (fund_config_status)
; 
-- CAT-78: environment adapter
CREATE TABLE IF NOT EXISTS environment_adapter ( 
	id BIGINT CONSTRAINT pk_env_adapter PRIMARY KEY,
	client_id BIGINT CONSTRAINT fk_trg_env_client REFERENCES client (id) NOT NULL,
	name varchar (20) not null,
	description varchar (100) not null,
	adapter_base_url varchar (100) not null,
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE environment_adapter_seq INCREMENT BY 1 START WITH 1 OWNED BY environment_adapter.id;
ALTER TABLE environment_adapter ADD CONSTRAINT unq_client_name UNIQUE (client_id, name);
-- CAT-78: environment foreign key to fund_config (optional)
ALTER TABLE fund_config
ADD COLUMN fund_data_source_environment_id BIGINT CONSTRAINT fk_fund_config_trg_env REFERENCES environment_adapter (id)
; 
drop view vwd_potential_transfer;
drop view vw_potential_transfer;
-- CAT-78: alter potential transfer view to include fund config id
CREATE OR REPLACE VIEW vw_potential_transfer (id, client_id, fund_config_id, from_fund_class_id, from_fund_id, from_class_id, to_fund_class_id, to_fund_id, to_class_id) 
	AS
SELECT
	_from.client_id || '|' || _from.fund_config_id || '|' ||  _from.id || '|' ||  _to.id as id,
	_from.client_id,
	_from.fund_config_id,
	_from.id from_fund_class_id, 
	_from.fund_id from_fund_id, 
	_from.class_id from_class_id, 
	_to.id to_fund_class_id, 
	_to.fund_id to_fund_id, 
	_to.class_id to_class_id
FROM 
	fund_class _from
INNER JOIN
	fund_class _to
ON
	_from.client_id = _to.client_id
	and _from.fund_config_id = _to.fund_config_id
;
CREATE OR REPLACE VIEW vwd_potential_transfer (id, client_id, fund_config_id, from_fund_class_id, from_fund_code, from_class_code, to_fund_class_id, to_fund_code, to_class_code, transfer_rule_override_type) 
	AS
SELECT
	vpt.client_id || '|' || vpt.fund_config_id || '|' || _from_fund.fund_code || '|' || _from_class.class_code || '|' || _to_fund.fund_code || '|' || _to_class.class_code as id,
	vpt.client_id,
	vpt.fund_config_id,
	vpt.from_fund_class_id,
	_from_fund.fund_code,
	_from_class.class_code,
	vpt.to_fund_class_id,
	_to_fund.fund_code,
	_to_class.class_code,
	tro.transfer_rule_override_type
FROM 
	vw_potential_transfer vpt
INNER JOIN
	fund _from_fund
ON
    vpt.from_fund_id = _from_fund.id
INNER JOIN
    fund _to_fund
ON
    vpt.to_fund_id = _to_fund.id        
INNER JOIN
    class _from_class
ON
    vpt.from_class_id = _from_class.id
INNER JOIN
    class _to_class
ON
    vpt.to_class_id = _to_class.id
LEFT JOIN
    transfer_rule_override tro
ON
    vpt.from_fund_class_id = tro.from_fund_class_id
AND vpt.to_fund_class_id = tro.to_fund_class_id
AND vpt.client_id = tro.client_id
AND vpt.fund_config_id = tro.fund_config_id 
;
-- CAT-78 add publication table, publication log, and related enum
CREATE TABLE IF NOT EXISTS pub_event_log_type (
	pub_event_log_type VARCHAR(15) CONSTRAINT pk_pub_event_log_type PRIMARY KEY
); 
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('AVAILABLE');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('NOTIFIED');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('CONSUMED');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAILED');
-- immutable
CREATE TABLE IF NOT EXISTS published_fund_config (
	id BIGINT CONSTRAINT pk_pub_trf_rule PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_pub_fund_cfg_client REFERENCES client (id),
	target_environment_id BIGINT NOT NULL CONSTRAINT fk_pub_fund_cfg_trg_env REFERENCES environment_adapter (id),
	fund_config_id BIGINT NOT NULL CONSTRAINT fk_pub_fund_cfg_fund_cfg REFERENCES fund_config (id),
	description text NOT NULL, 
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL
);
-- JAC: used text for description to allow unlimited length per user requirements
-- immutable
CREATE TABLE IF NOT EXISTS publish_event_log (
	id BIGINT CONSTRAINT pk_pub_event_log PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_pub_event_log_client REFERENCES client (id),
	published_fund_config_id BIGINT NOT NULL CONSTRAINT fk_pub_event_log_pub_fund_cfg REFERENCES published_fund_config (id),
	pub_event_log_type VARCHAR(15) NOT NULL CONSTRAINT fk_pub_event_log_type REFERENCES pub_event_log_type (pub_event_log_type),
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL
);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0004','Create environment and header tables','SQL','Major0001/V1.0004__Create_environment_and_header_tables.sql',-192541421,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0005
-- --------------------------------------------------------------------
-- following statement to accomodate real data, which can have name as null
ALTER TABLE fund_class alter column name drop not null;
ALTER TABLE fund_config alter column version drop not null;
ALTER TABLE fund_config ADD CONSTRAINT version_required CHECK ((fund_config_status='LOCKED' AND version is not null) OR (fund_config_status='DRAFT' AND version is null));

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0005','Fund Config Version Constraints','SQL','Major0001/V1.0005__Fund_Config_Version_Constraints.sql',51975796,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0006
-- --------------------------------------------------------------------
-- add missing sequences 
CREATE SEQUENCE published_fund_config_seq INCREMENT BY 1 START WITH 1 OWNED BY published_fund_config.id;
CREATE SEQUENCE publish_event_log_seq INCREMENT BY 1 START WITH 1 OWNED BY publish_event_log.id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0006','Published Fund Config Sequence','SQL','Major0001/V1.0006__Published_Fund_Config_Sequence.sql',1609144516,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0007
-- --------------------------------------------------------------------
CREATE OR REPLACE VIEW vwd_fund_config (
    id, client_id, version, config_name, fund_config_status,
    fund_data_source_env_id, created_user_id, created_date, last_updated_user_id, last_updated_date,
    src_version, src_config_name, src_fund_config_status, src_fund_data_source_env_id, src_created_user_id,
    src_created_date, src_last_updated_user_id, src_last_updated_date)
    AS
SELECT
    cfg.id,
    cfg.client_id,
    cfg.version,
    cfg.config_name,
    cfg.fund_config_status,
    cfg.fund_data_source_environment_id, 
    cfg.created_user_id, 
    cfg.created_date, 
    cfg.last_updated_user_id, 
    cfg.last_updated_date,
    source_cfg.version,
    source_cfg.config_name,
    source_cfg.fund_config_status,
    source_cfg.fund_data_source_environment_id, 
    source_cfg.created_user_id, 
    source_cfg.created_date, 
    source_cfg.last_updated_user_id, 
    source_cfg.last_updated_date
FROM
    fund_config cfg
LEFT JOIN
    fund_config source_cfg
ON 
    cfg.source_id = source_cfg.id
    AND cfg.client_id = source_cfg.client_id;
CREATE OR REPLACE VIEW vwd_published_fund_config (
   id, client_id, fund_config_id, description, created_user_id,
   created_date, environment_name, environment_description)
   AS
SELECT
    pfc.id,
    pfc.client_id,
    pfc.fund_config_id,
    pfc.description,
    pfc.created_user_id,
    pfc.created_date,
    ea.name,
    ea.description
FROM
    published_fund_config pfc
INNER JOIN
    environment_adapter ea
    ON
	    pfc.target_environment_id = ea.id
	    AND pfc.client_id = ea.client_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0007','Create views for fund config','SQL','Major0001/V1.0007__Create_views_for_fund_config.sql',-820157356,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0008
-- --------------------------------------------------------------------
-- recreate publication events enum
DELETE FROM pub_event_log_type;
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('TRIGGERED');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('NOTIFIED');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('RECEIVED');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('DELTA');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('SUCCESS');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAIL');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('KILLED');

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0008','Publish Event Log Types','SQL','Major0001/V1.0008__Publish_Event_Log_Types.sql',2104913251,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0009
-- --------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "user" ( 
	id BIGINT CONSTRAINT pk_user PRIMARY KEY,
	first_name varchar(50) NOT NULL,
	last_name varchar(50) NOT NULL
);
CREATE SEQUENCE user_seq INCREMENT BY 1 START WITH 1 OWNED BY "user".id;
ALTER TABLE fund_config
ADD CONSTRAINT fk_fund_config_user
FOREIGN KEY (created_user_id)
REFERENCES "user" (id);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0009','Create User Table','SQL','Major0001/V1.0009__Create_User_Table.sql',-421487280,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0010
-- --------------------------------------------------------------------
DROP VIEW vwd_fund_config;
CREATE OR REPLACE VIEW vwd_fund_config (
    id, client_id, version, config_name, fund_config_status,
    fund_data_source_env_id, created_user_id, created_date, last_updated_user_id, last_updated_date,
    source_id, source_version, source_config_name, source_fund_config_status,
    source_fund_data_source_env_id, source_created_user_id,
    source_created_date, source_last_updated_user_id, source_last_updated_date,
    created_user_first_name,
    created_user_last_name,
    updated_user_first_name,
    updated_user_last_name,
    source_created_user_first_name,
    source_created_user_last_name,
    source_updated_user_first_name,
    source_updated_user_last_name)
    AS
SELECT
    cfg.id,
    cfg.client_id,
    cfg.version,
    cfg.config_name,
    cfg.fund_config_status,
    cfg.fund_data_source_environment_id, 
    cfg.created_user_id, 
    cfg.created_date, 
    cfg.last_updated_user_id,
    cfg.last_updated_date,
    source_cfg.id,
    source_cfg.version,
    source_cfg.config_name,
    source_cfg.fund_config_status,
    source_cfg.fund_data_source_environment_id, 
    source_cfg.created_user_id, 
    source_cfg.created_date, 
    source_cfg.last_updated_user_id, 
    source_cfg.last_updated_date,
    created_user.first_name,
    created_user.last_name,
    updated_user.first_name,
    updated_user.last_name,
    source_created_user.first_name,
    source_created_user.last_name,
    source_updated_user.first_name,
    source_updated_user.last_name
FROM
    fund_config cfg
INNER JOIN
	"user" created_user
ON
	cfg.created_user_id = created_user.id
LEFT OUTER JOIN
	"user" updated_user
ON
	cfg.last_updated_user_id = updated_user.id
LEFT JOIN
    fund_config source_cfg
ON 
    cfg.source_id = source_cfg.id
    AND cfg.client_id = source_cfg.client_id
LEFT JOIN
	"user" source_created_user
ON
	source_cfg.created_user_id = source_created_user.id
LEFT JOIN
	"user" source_updated_user
ON
	source_cfg.last_updated_user_id = source_updated_user.id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0010','Add User To Fund Config View','SQL','Major0001/V1.0010__Add_User_To_Fund_Config_View.sql',-6620019,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0011
-- --------------------------------------------------------------------
ALTER TABLE fund_config ADD COLUMN description VARCHAR(512);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0011','Add Description to Fund Config','SQL','Major0001/V1.0011__Add_Description_to_Fund_Config.sql',-2036665931,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0012
-- --------------------------------------------------------------------
-- CAT-16 
CREATE TABLE IF NOT EXISTS pub_fund_config_status (
	pub_fund_config_status VARCHAR(15) CONSTRAINT pk_pub_fund_config_status PRIMARY KEY
); 
INSERT INTO pub_fund_config_status (pub_fund_config_status) VALUES ('START');
INSERT INTO pub_fund_config_status (pub_fund_config_status) VALUES ('WORKING');
INSERT INTO pub_fund_config_status (pub_fund_config_status) VALUES ('SUCCESS');
INSERT INTO pub_fund_config_status (pub_fund_config_status) VALUES ('FAIL');
INSERT INTO pub_fund_config_status (pub_fund_config_status) VALUES ('CANCEL');
-- recreate publication events enum (one more time)
DELETE FROM pub_event_log_type;
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('NOTIFIED');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('RECEIVED');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('DELTA');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('SUCCESS');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAIL');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('KILLED');
-- add update audit to published fund config table
ALTER TABLE published_fund_config add column published_fund_config_status VARCHAR(10) NOT NULL;
ALTER TABLE published_fund_config add column last_updated_user_id BIGINT NOT NULL;
ALTER TABLE published_fund_config add column last_updated_date TIMESTAMP NOT NULL;
DROP VIEW vwd_published_fund_config;
CREATE OR REPLACE VIEW vwd_published_fund_config (
   id, client_id, fund_config_id, created_user_id,
   created_date, environment_name, environment_description)
   AS
SELECT
    pfc.id,
    pfc.client_id,
    pfc.fund_config_id,
    pfc.created_user_id,
    pfc.created_date,
    ea.name,
    ea.description
FROM
    published_fund_config pfc
INNER JOIN
    environment_adapter ea
    ON
	    pfc.target_environment_id = ea.id
	    AND pfc.client_id = ea.client_id;
ALTER TABLE published_fund_config drop column description;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0012','Published Fund Config Status','SQL','Major0001/V1.0012__Published_Fund_Config_Status.sql',708206414,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0013
-- --------------------------------------------------------------------
DROP VIEW vwd_fund_config;
CREATE OR REPLACE VIEW vwd_fund_config (
    id, client_id, version, config_name, config_description, fund_config_status,
    fund_data_source_env_id, created_user_id, created_date, last_updated_user_id, last_updated_date,
    source_id, source_version, source_config_name, source_fund_config_status,
    source_fund_data_source_env_id, source_created_user_id,
    source_created_date, source_last_updated_user_id, source_last_updated_date,
    created_user_first_name,
    created_user_last_name,
    updated_user_first_name,
    updated_user_last_name,
    source_created_user_first_name,
    source_created_user_last_name,
    source_updated_user_first_name,
    source_updated_user_last_name)
    AS
SELECT
    cfg.id,
    cfg.client_id,
    cfg.version,
    cfg.config_name,
    cfg.description,
    cfg.fund_config_status,
    cfg.fund_data_source_environment_id, 
    cfg.created_user_id, 
    cfg.created_date, 
    cfg.last_updated_user_id,
    cfg.last_updated_date,
    source_cfg.id,
    source_cfg.version,
    source_cfg.config_name,
    source_cfg.fund_config_status,
    source_cfg.fund_data_source_environment_id, 
    source_cfg.created_user_id, 
    source_cfg.created_date, 
    source_cfg.last_updated_user_id, 
    source_cfg.last_updated_date,
    created_user.first_name,
    created_user.last_name,
    updated_user.first_name,
    updated_user.last_name,
    source_created_user.first_name,
    source_created_user.last_name,
    source_updated_user.first_name,
    source_updated_user.last_name
FROM
    fund_config cfg
INNER JOIN
	"user" created_user
ON
	cfg.created_user_id = created_user.id
LEFT OUTER JOIN
	"user" updated_user
ON
	cfg.last_updated_user_id = updated_user.id
LEFT JOIN
    fund_config source_cfg
ON 
    cfg.source_id = source_cfg.id
    AND cfg.client_id = source_cfg.client_id
LEFT JOIN
	"user" source_created_user
ON
	source_cfg.created_user_id = source_created_user.id
LEFT JOIN
	"user" source_updated_user
ON
	source_cfg.last_updated_user_id = source_updated_user.id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0013','Add Description To Fund Config View','SQL','Major0001/V1.0013__Add_Description_To_Fund_Config_View.sql',1716087526,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0014
-- --------------------------------------------------------------------
-- undo and reapply script 'v1.0009-create user table'
alter table fund_config drop constraint fk_fund_config_user;
drop sequence user_seq;
DROP VIEW vwd_fund_config;
drop table "user";
CREATE TABLE IF NOT EXISTS system_user ( 
	id BIGINT CONSTRAINT pk_user PRIMARY KEY,
	first_name varchar(50) NOT NULL,
	last_name varchar(50) NOT NULL
);
CREATE SEQUENCE system_user_seq INCREMENT BY 1 START WITH 1 OWNED BY system_user.id;
ALTER TABLE fund_config
ADD CONSTRAINT fk_fund_config_user
FOREIGN KEY (created_user_id)
REFERENCES system_user (id);
-- undo and reapply script 'v1.0013-add description to fund_config_view'
CREATE OR REPLACE VIEW vwd_fund_config (
    id, client_id, version, config_name, config_description, fund_config_status,
    fund_data_source_env_id, created_user_id, created_date, last_updated_user_id, last_updated_date,
    source_id, source_version, source_config_name, source_fund_config_status,
    source_fund_data_source_env_id, source_created_user_id,
    source_created_date, source_last_updated_user_id, source_last_updated_date,
    created_user_first_name,
    created_user_last_name,
    updated_user_first_name,
    updated_user_last_name,
    source_created_user_first_name,
    source_created_user_last_name,
    source_updated_user_first_name,
    source_updated_user_last_name)
    AS
SELECT
    cfg.id,
    cfg.client_id,
    cfg.version,
    cfg.config_name,
    cfg.description,
    cfg.fund_config_status,
    cfg.fund_data_source_environment_id, 
    cfg.created_user_id, 
    cfg.created_date, 
    cfg.last_updated_user_id,
    cfg.last_updated_date,
    source_cfg.id,
    source_cfg.version,
    source_cfg.config_name,
    source_cfg.fund_config_status,
    source_cfg.fund_data_source_environment_id, 
    source_cfg.created_user_id, 
    source_cfg.created_date, 
    source_cfg.last_updated_user_id, 
    source_cfg.last_updated_date,
    created_user.first_name,
    created_user.last_name,
    updated_user.first_name,
    updated_user.last_name,
    source_created_user.first_name,
    source_created_user.last_name,
    source_updated_user.first_name,
    source_updated_user.last_name
FROM
    fund_config cfg
INNER JOIN
	system_user created_user
ON
	cfg.created_user_id = created_user.id
LEFT OUTER JOIN
	system_user updated_user
ON
	cfg.last_updated_user_id = updated_user.id
LEFT JOIN
    fund_config source_cfg
ON 
    cfg.source_id = source_cfg.id
    AND cfg.client_id = source_cfg.client_id
LEFT JOIN
	system_user source_created_user
ON
	source_cfg.created_user_id = source_created_user.id
LEFT JOIN
	system_user source_updated_user
ON
	source_cfg.last_updated_user_id = source_updated_user.id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0014','Rename User to SystemUser','SQL','Major0001/V1.0014__Rename_User_to_SystemUser.sql',-975268350,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0015
-- --------------------------------------------------------------------
-- Early days of project, still okay to blow away existing data. 
DELETE FROM fund;
DELETE FROM class;
DELETE FROM transfer_rule_override;
DELETE FROM fund_class;
DELETE FROM publish_event_log;
DELETE FROM published_fund_config;
DELETE FROM fund_config;
DROP VIEW vwd_fund_config;
ALTER TABLE fund_config ADD COLUMN version_year INT NULL, ADD COLUMN version_number INT NULL;
ALTER TABLE fund_config DROP CONSTRAINT IF EXISTS version_required;
ALTER TABLE fund_config ADD CONSTRAINT chk_fund_config_version_status CHECK 
	((fund_config_status = 'LOCKED' AND (version_year IS NOT NULL AND version_number IS NOT NULL)) OR 
	(fund_config_status = 'DRAFT' AND (version_year IS NULL AND version_number IS NULL)));
ALTER TABLE fund_config ADD CONSTRAINT unq_fund_config_clientversion UNIQUE (client_id, version_year, version_number);
ALTER TABLE fund_config DROP COLUMN IF EXISTS version;
CREATE OR REPLACE VIEW vwd_fund_config AS
SELECT
    cfg.id,
    cfg.client_id,
    cfg.version_year,
    cfg.version_number,
    cfg.config_name,
    cfg.description AS config_description,
    cfg.fund_config_status,
    cfg.fund_data_source_environment_id AS fund_data_source_env_id, 
    cfg.created_user_id, 
    cfg.created_date, 
    cfg.last_updated_user_id,
    cfg.last_updated_date,
    source_cfg.id AS source_id,
    source_cfg.version_year AS source_version_year,
    source_cfg.version_number AS source_version_number,
    source_cfg.config_name AS source_config_name,
    source_cfg.fund_config_status AS source_fund_config_status,
    source_cfg.fund_data_source_environment_id AS source_fund_data_source_env_id, 
    source_cfg.created_user_id AS source_created_user_id, 
    source_cfg.created_date AS source_created_date, 
    source_cfg.last_updated_user_id AS source_last_updated_user_id, 
    source_cfg.last_updated_date AS source_last_updated_date,
    created_user.first_name AS created_user_first_name,
    created_user.last_name AS created_user_last_name,
    updated_user.first_name AS updated_user_first_name,
    updated_user.last_name AS updated_user_last_name,
    source_created_user.first_name AS source_created_user_first_name,
    source_created_user.last_name AS source_created_user_last_name,
    source_updated_user.first_name AS source_updated_user_first_name,
    source_updated_user.last_name AS source_updated_user_last_name
FROM
    fund_config cfg
INNER JOIN
	system_user created_user
ON
	cfg.created_user_id = created_user.id
LEFT OUTER JOIN
	system_user updated_user
ON
	cfg.last_updated_user_id = updated_user.id
LEFT JOIN
    fund_config source_cfg
ON 
    cfg.source_id = source_cfg.id
    AND cfg.client_id = source_cfg.client_id
LEFT JOIN
	system_user source_created_user
ON
	source_cfg.created_user_id = source_created_user.id
LEFT JOIN
	system_user source_updated_user
ON
	source_cfg.last_updated_user_id = source_updated_user.id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0015','Add Client Version Constraint To Config','SQL','Major0001/V1.0015__Add_Client_Version_Constraint_To_Config.sql',-2117737880,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0016
-- --------------------------------------------------------------------
DROP SEQUENCE config_response_status_seq;
DROP TABLE config_response_status;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0016','Drop config response status table','SQL','Major0001/V1.0016__Drop_config_response_status_table.sql',1775788800,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0017
-- --------------------------------------------------------------------
-- ----------------------
--  1. Publish_event_log modifications
-- ----------------------
-- erase table prior to truncating table, to be able to set the new FK values
DELETE FROM publish_event_log;
-- eliminate the FK on publish_event_log to be able to replace pub_event_log_type
ALTER TABLE publish_event_log DROP CONSTRAINT fk_pub_event_log_type;
ALTER TABLE publish_event_log DROP COLUMN pub_event_log_type;
ALTER TABLE publish_event_log ADD COLUMN pub_event_log_type VARCHAR(40);
-- enlongate the log_type definition
DROP TABLE pub_event_log_type;
CREATE TABLE pub_event_log_type (
	pub_event_log_type VARCHAR(40) CONSTRAINT pk_pub_event_log_type PRIMARY KEY
); 
-- insert enumerated values
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('WORKING_INITIAL_PUBLISH_SENT');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('WORKING_TRANSFERS_REQUEST_RECEIVED');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('WORKING_TRANSFERS_RESPONSE_SEND');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('SUCCESS');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAILED_INITIAL_PUBLISH_SENT');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAILED_TIMEOUT_RECEIVE_GET_TRANSFERS');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAILED_READ_TRANSFERS');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAILED_RESPOND_WITH_TRANSFERS');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAILED_TIMEOUT_RECEIVE_FINAL_POST');
INSERT INTO pub_event_log_type (pub_event_log_type) VALUES ('FAILED_ADAPTER_FAILURE');
-- create FK constraints between publish_event_log and pub_event_log_type
ALTER TABLE publish_event_log ADD CONSTRAINT fk_pub_event_log_type FOREIGN KEY (pub_event_log_type) REFERENCES pub_event_log_type (pub_event_log_type);
-- ----------------------
--  2. published_fund_config modifications
-- ----------------------
CREATE TABLE published_fund_event_status (
	published_fund_event_status VARCHAR(50) CONSTRAINT pk_published_fund_event_status PRIMARY KEY
);
-- set contents of published_fund_event_status table
-- PUB_FUND is for GUI display, PUB_EVENT_LOG is for detailed status for technical logging purposes
INSERT INTO published_fund_event_status (published_fund_event_status) VALUES ('IN_PROGRESS');
INSERT INTO published_fund_event_status (published_fund_event_status) VALUES ('SUCCESS');
INSERT INTO published_fund_event_status (published_fund_event_status) VALUES ('FAIL');
INSERT INTO published_fund_event_status (published_fund_event_status) VALUES ('CANCEL');
-- delete existing data
DELETE FROM published_fund_config;
-- elongate status
ALTER TABLE published_fund_config DROP COLUMN published_fund_config_status;
ALTER TABLE published_fund_config ADD COLUMN published_fund_config_status VARCHAR(50) NOT NULL;
-- create FK constraints between pub_event_log_type and published_fund_config
ALTER TABLE published_fund_config ADD CONSTRAINT fk_pubfundconf_pubfundconfeventtype FOREIGN KEY (published_fund_config_status) REFERENCES published_fund_event_status (published_fund_event_status);
-- ----------------------
--  3. environment_adapter status modifications
-- ----------------------
-- create new reference table for enum for environment_adapter states
CREATE TABLE env_adapter_pub_status_type (
	env_adapter_pub_status VARCHAR(50) CONSTRAINT pk_env_adapter_pub_status_type PRIMARY KEY
);
INSERT INTO env_adapter_pub_status_type (env_adapter_pub_status) VALUES ('IDLE');
INSERT INTO env_adapter_pub_status_type (env_adapter_pub_status) VALUES ('WORKING_INITIAL_PUBLISH_SENT');
INSERT INTO env_adapter_pub_status_type (env_adapter_pub_status) VALUES ('WORKING_TRANSFERS_REQUEST_RECEIVED');
INSERT INTO env_adapter_pub_status_type (env_adapter_pub_status) VALUES ('WORKING_TRANSFERS_RESPONSE_SENT');
-- create child table to contain the environment items
CREATE TABLE env_adapter_pub_status (
	environment_id BIGINT constraint pk_env_adapter_pub_status PRIMARY KEY REFERENCES environment_adapter (id),
	env_adapter_pub_status VARCHAR(50) NOT NULL
);
-- create FK constraints between new enum and environment_adapter states
ALTER TABLE env_adapter_pub_status ADD CONSTRAINT fk_envadappubstat_envadappubstattype FOREIGN KEY (env_adapter_pub_status)  REFERENCES env_adapter_pub_status_type (env_adapter_pub_status);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0017','Add State To Environment Adapter','SQL','Major0001/V1.0017__Add_State_To_Environment_Adapter.sql',830748691,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0018
-- --------------------------------------------------------------------
-- As part of CAT-108 the MockAdapter starting returning "real" data. That necessitated the following changes
ALTER TABLE fund_class ALTER COLUMN baycom_number DROP NOT NULL;
ALTER TABLE fund ALTER COLUMN name TYPE VARCHAR(200);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0018','Changes from working with real data files','SQL','Major0001/V1.0018__Changes_from_working_with_real_data_files.sql',-258019952,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0019
-- --------------------------------------------------------------------
-- CAT-16 - need an additional 'publish number' which has to be part of the Config Service / Adapter communication process
-- to allow the req/res conversation to refer to a SPECIFIC fund config
delete from publish_event_log;
delete from published_fund_config;
ALTER TABLE published_fund_config ADD publish_number INT NOT NULL;
ALTER TABLE published_fund_config ADD CONSTRAINT unq_pub_fund_conf_pubnum unique(fund_config_id, publish_number);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0019','Additional Publish Number For Fund Config Identifier','SQL','Major0001/V1.0019__Additional_Publish_Number_For_Fund_Config_Identifier.sql',-32239654,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0020
-- --------------------------------------------------------------------
DROP VIEW vwd_published_fund_config;
CREATE OR REPLACE VIEW vwd_published_fund_config 
   AS
SELECT
    pfc.id,
    pfc.client_id,
    pfc.fund_config_id,
    pfc.publish_number,
    pfc.published_fund_config_status,
    pfc.last_updated_user_id,
    pfc.last_updated_date,
    ea.name as environment_name,
    ea.description as environment_description
FROM
    published_fund_config pfc
INNER JOIN
    environment_adapter ea
    ON
	    pfc.target_environment_id = ea.id
	    AND pfc.client_id = ea.client_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0020','Update published fund config view','SQL','Major0001/V1.0020__Update_published_fund_config_view.sql',-1352208965,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 1.0021
-- --------------------------------------------------------------------
-- Per Wilf's request, modify all statuses from IN_PROGRESS to PROCESSING
INSERT INTO published_fund_event_status (published_fund_event_status) VALUES ('PROCESSING');
UPDATE published_fund_config SET published_fund_config_status='PROCESSING' WHERE published_fund_config_status='IN_PROGRESS';
DELETE from published_fund_event_status WHERE published_fund_event_status='IN_PROGRESS';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'1.0021','Update published fund event status','SQL','Major0001/V1.0021__Update_published_fund_event_status.sql',-278199612,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 2.0000
-- --------------------------------------------------------------------
CREATE TABLE fund_config_cmp_result_header (
	id BIGINT PRIMARY KEY,
	fund_config_id_base BIGINT NOT NULL   CONSTRAINT fk_fund_cfg_cmp_res_head_fc_base REFERENCES fund_config (id),
	fund_config_id_target BIGINT NOT NULL CONSTRAINT fk_fund_cfg_cmp_res_head_fc_targ REFERENCES fund_config (id),
	created_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE fund_config_cmp_result_header_seq INCREMENT BY 1 START WITH 1 OWNED BY fund_config_cmp_result_header.id;
CREATE TABLE fund_config_cmp_result (
	id BIGINT PRIMARY KEY,
	fund_config_cmp_result_header_id BIGINT NOT NULL CONSTRAINT fk_fund_cfg_cmp_res_fccr_head REFERENCES fund_config_cmp_result_header(id),
	result_type VARCHAR(16) NOT NULL,
	from_fund_code VARCHAR(10) NOT NULL,
	from_class_code VARCHAR(2) NOT NULL,
	to_fund_code VARCHAR(10) NOT NULL,
	to_class_code VARCHAR(2) NOT NULL,
	base_new_money BOOLEAN,
	base_online_allowed BOOLEAN,
	base_auto_allowed BOOLEAN,
	base_short_term_fee BOOLEAN,
	base_rebalancing BOOLEAN,
	base_target_units VARCHAR(8),
	base_interfaces_allowed BOOLEAN,
	target_new_money BOOLEAN,
	target_online_allowed BOOLEAN,
	target_auto_allowed BOOLEAN,
	target_short_term_fee BOOLEAN,
	target_rebalancing BOOLEAN,
	target_target_units VARCHAR(8),
	target_interfaces_allowed BOOLEAN
);
CREATE SEQUENCE fund_config_cmp_result_seq INCREMENT BY 1 START WITH 1 OWNED BY fund_config_cmp_result.id;
CREATE UNIQUE INDEX idx_fund_config_cmd_result ON fund_config_cmp_result(fund_config_cmp_result_header_id, from_fund_code, from_class_code, to_fund_code, to_class_code);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'2.0000','Create Fund Config Comparison Result Tables','SQL','Major0002/V2.0000__Create_Fund_Config_Comparison_Result_Tables.sql',1888128434,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 2.0001
-- --------------------------------------------------------------------
DROP TABLE pub_fund_config_status;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'2.0001','drop extraneous table','SQL','Major0002/V2.0001__drop_extraneous_table.sql',-1612781047,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 2.0002
-- --------------------------------------------------------------------
ALTER INDEX idx_fund_config_cmd_result RENAME TO unq_fund_config_cmd_result;
ALTER TABLE class      DROP COLUMN last_updated_user_id;
ALTER TABLE class      DROP COLUMN last_updated_date;
ALTER TABLE fund       DROP COLUMN last_updated_user_id;
ALTER TABLE fund       DROP COLUMN last_updated_date;
ALTER TABLE fund_class DROP COLUMN last_updated_user_id;
ALTER TABLE fund_class DROP COLUMN last_updated_date;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'2.0002','Remove Update Time From Fund Classes','SQL','Major0002/V2.0002__Remove_Update_Time_From_Fund_Classes.sql',281595804,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 2.0003
-- --------------------------------------------------------------------
alter table fund alter column "name" drop not null;
alter table fund_class rename baycom_number to fundserv_code;
-- CAT-152 normally when adding new unique constraints, we would attempt to clean up possible duplicates. We are sure there are none in this case
alter table fund_class
    drop constraint unq_fund_class_clientidbaycomnumber,
    add constraint unq_fundclass_client_config_fund_class unique(client_id, fund_config_id, fund_id, class_id);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'2.0003','nullify fund name and rename baycom','SQL','Major0002/V2.0003__nullify_fund_name_and_rename_baycom.sql',-463408932,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 2.0004
-- --------------------------------------------------------------------
-- CAT-129: Adding max_last_update_date column to the view
DROP VIEW vwd_fund_config;
CREATE VIEW vwd_fund_config AS
SELECT
    cfg.id,
    cfg.client_id,
    cfg.version_year,
    cfg.version_number,
    cfg.config_name,
    cfg.description AS config_description,
    cfg.fund_config_status,
    cfg.fund_data_source_environment_id AS fund_data_source_env_id, 
    cfg.created_user_id, 
    cfg.created_date, 
    cfg.last_updated_user_id,
    cfg.last_updated_date,
    source_cfg.id AS source_id,
    source_cfg.version_year AS source_version_year,
    source_cfg.version_number AS source_version_number,
    source_cfg.config_name AS source_config_name,
    source_cfg.fund_config_status AS source_fund_config_status,
    source_cfg.fund_data_source_environment_id AS source_fund_data_source_env_id, 
    source_cfg.created_user_id AS source_created_user_id, 
    source_cfg.created_date AS source_created_date, 
    source_cfg.last_updated_user_id AS source_last_updated_user_id, 
    source_cfg.last_updated_date AS source_last_updated_date,
    created_user.first_name AS created_user_first_name,
    created_user.last_name AS created_user_last_name,
    updated_user.first_name AS updated_user_first_name,
    updated_user.last_name AS updated_user_last_name,
    source_created_user.first_name AS source_created_user_first_name,
    source_created_user.last_name AS source_created_user_last_name,
    source_updated_user.first_name AS source_updated_user_first_name,
    source_updated_user.last_name AS source_updated_user_last_name,
    (SELECT MAX(last_updated_date) FROM transfer_rule_override tro WHERE tro.fund_config_id = cfg.id) AS max_last_updated_date
FROM
    fund_config cfg
INNER JOIN
	system_user created_user
ON
	cfg.created_user_id = created_user.id
LEFT OUTER JOIN
	system_user updated_user
ON
	cfg.last_updated_user_id = updated_user.id
LEFT JOIN
    fund_config source_cfg
ON 
    cfg.source_id = source_cfg.id
    AND cfg.client_id = source_cfg.client_id
LEFT JOIN
	system_user source_created_user
ON
	source_cfg.created_user_id = source_created_user.id
LEFT JOIN
	system_user source_updated_user
ON
	source_cfg.last_updated_user_id = source_updated_user.id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'2.0004','Add Column to Vwd Fund Config','SQL','Major0002/V2.0004__Add_Column_to_Vwd_Fund_Config.sql',712869862,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0000
-- --------------------------------------------------------------------
CREATE TABLE associated_fund (
	id BIGINT CONSTRAINT pk_associated_fund PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_associated_fund_client REFERENCES client (id),
	fund_config_id BIGINT CONSTRAINT fk_associated_fund_fundcfg REFERENCES fund_config (id),
	fund_code_base VARCHAR(10) NOT NULL,
	fund_code_to VARCHAR(10) NOT NULL,
	-- audit fields
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE associated_fund_seq INCREMENT BY 1 START WITH 1 OWNED BY associated_fund.id;
CREATE UNIQUE INDEX unq_associated_fund ON associated_fund (client_id, fund_config_id, fund_code_base, fund_code_to);
COMMENT ON TABLE associated_fund IS 'Associated fund inciates that 2 funds are US and Canadian Dollar version of the same fund';
CREATE TABLE dcaf_transfer (
	id BIGINT CONSTRAINT pk_dcaf_transfe PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_dcaf_transfer_client REFERENCES client (id),
	fund_config_id BIGINT CONSTRAINT fk_dcaf_transfer_fundcfg REFERENCES fund_config (id),
	fund_code_from VARCHAR(10) NOT NULL,
	class_code_from VARCHAR(2) NOT NULL,
	fund_code_to VARCHAR(10) NOT NULL,
	class_code_to VARCHAR(2) NOT NULL,
	start_date DATE NOT NULL,
	stop_date DATE NOT NULL,
	-- audit fields
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE dcaf_transfer_seq INCREMENT BY 1 START WITH 1 OWNED BY dcaf_transfer.id;
CREATE UNIQUE INDEX unq_dcaf_transfer ON dcaf_transfer (client_id, fund_config_id, fund_code_from, class_code_from, start_date);
COMMENT ON TABLE dcaf_transfer IS 'Dcaf transfer indicates that the clien requires dollar cost averaging';
ALTER TABLE fund ADD COLUMN english_name VARCHAR(200);
ALTER TABLE fund ADD COLUMN french_name VARCHAR(200);
ALTER TABLE class ADD COLUMN english_name VARCHAR(200);
ALTER TABLE class ADD COLUMN french_name VARCHAR(200);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0000','Add Additional Fund Config Data','SQL','Major0003/V3.0000__Add_Additional_Fund_Config_Data.sql',-1585391177,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0001
-- --------------------------------------------------------------------
-- changes per Wilf
-- TODO: TE - follow up on column lengths; ask someone at IFDS
ALTER TABLE associated_fund RENAME COLUMN fund_code_base TO fund_code_from;
COMMENT ON TABLE associated_fund IS 'Relates US and Canadian dollar versions of the same fund';
ALTER INDEX pk_dcaf_transfe RENAME TO pk_dcaf_transfer;
COMMENT ON TABLE dcaf_transfer IS 'Defines how money is transferred from a Dollar Cost Averaging Fund to its target fund';
ALTER TABLE fund DROP COLUMN english_name;
ALTER TABLE fund DROP COLUMN french_name;
ALTER TABLE fund ADD COLUMN english_name_short VARCHAR(16);
ALTER TABLE fund ADD COLUMN french_name_short VARCHAR(16);
ALTER TABLE fund ADD COLUMN english_name_medium VARCHAR(40);
ALTER TABLE fund ADD COLUMN french_name_medium VARCHAR(40);
ALTER TABLE fund ADD COLUMN english_name_long VARCHAR(160);
ALTER TABLE fund ADD COLUMN french_name_long VARCHAR(160);
ALTER TABLE class ALTER COLUMN english_name TYPE VARCHAR(80);
ALTER TABLE class ALTER COLUMN french_name TYPE VARCHAR(80);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0001','Alter Additional Fund Config Data','SQL','Major0003/V3.0001__Alter_Additional_Fund_Config_Data.sql',-231662939,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0002
-- --------------------------------------------------------------------
-- OK to delete here, this is just a cache table.
DELETE FROM fund_config_cmp_result;
ALTER TABLE fund_config_cmp_result 
	ALTER COLUMN base_online_allowed TYPE VARCHAR(25),
	ALTER COLUMN target_online_allowed TYPE VARCHAR(25),
	ALTER COLUMN base_auto_allowed TYPE VARCHAR(25),
	ALTER COLUMN target_auto_allowed TYPE VARCHAR(25),
	ALTER COLUMN base_interfaces_allowed TYPE VARCHAR(25),
	ALTER COLUMN target_interfaces_allowed TYPE VARCHAR(25)
;
ALTER TABLE fund_config_cmp_result 
	ADD CONSTRAINT chk_fc_cmp_res_b_on_allow CHECK (base_online_allowed in ('BOTH', 'PARTIAL_ONLY', 'FULL_ONLY')),
	ADD CONSTRAINT chk_fc_cmp_res_t_on_allow CHECK (target_online_allowed in ('BOTH', 'PARTIAL_ONLY', 'FULL_ONLY')),
	ADD CONSTRAINT chk_fc_cmp_res_b_au_allow CHECK (base_auto_allowed in ('BOTH', 'PARTIAL_ONLY', 'FULL_ONLY')),
	ADD CONSTRAINT chk_fc_cmp_res_t_au_allow CHECK (target_auto_allowed in ('BOTH', 'PARTIAL_ONLY', 'FULL_ONLY')),
	ADD CONSTRAINT chk_fc_cmp_res_b_in_allow CHECK (base_interfaces_allowed in ('ALL_INTERFACES','NOT_FUNDSERV','FUNDSERV_ONLY')),
	ADD CONSTRAINT chk_fc_cmp_res_t_in_allow CHECK (target_interfaces_allowed in ('ALL_INTERFACES','NOT_FUNDSERV','FUNDSERV_ONLY'))
;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0002','Alter Fund Config Cmp Result Attr Types','SQL','Major0003/V3.0002__Alter_Fund_Config_Cmp_Result_Attr_Types.sql',245647832,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0003
-- --------------------------------------------------------------------
-- Temporarily add separate publish base url for adapter until it can do round trip
ALTER TABLE environment_adapter ADD COLUMN adapter_base_url_publish varchar (100);
UPDATE environment_adapter SET adapter_base_url_publish = adapter_base_url;
ALTER TABLE environment_adapter ALTER COLUMN adapter_base_url_publish SET NOT NULL;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0003','Add Adapter Base Url For Publish','SQL','Major0003/V3.0003__Add_Adapter_Base_Url_For_Publish.sql',2048429895,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0004
-- --------------------------------------------------------------------
ALTER TABLE fund DROP COLUMN name;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0004','Remove Name From Fund Class','SQL','Major0003/V3.0004__Remove_Name_From_Fund_Class.sql',-102739112,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0005
-- --------------------------------------------------------------------
-- CAT-203 - initial rules table
CREATE TABLE not_allowed_rule (
	id BIGINT PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_not_allowed_rule_client REFERENCES client (id),
	fund_config_id BIGINT NOT NULL CONSTRAINT fk_not_allowed_rule_fundcfg REFERENCES fund_config (id),
	rule_type VARCHAR(10) NOT NULL,
	left_input_box1_type VARCHAR(20) NOT NULL,
	left_input_box1_id BIGINT,
	left_input_box2_type VARCHAR(20),
	left_input_box2_id BIGINT,
	right_input_box1_type VARCHAR(20) NOT NULL,
	right_input_box1_id BIGINT,
	right_input_box2_type VARCHAR(20),
	right_input_box2_id VARCHAR(20),
	start_date TIMESTAMP NOT NULL,
	stop_date TIMESTAMP,
	ordinal BIGINT NOT NULL,
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE not_allowed_rule_seq INCREMENT BY 1 START WITH 1 OWNED BY not_allowed_rule.id;
CREATE UNIQUE INDEX unq_na_rule ON not_allowed_rule (client_id, fund_config_id, rule_type, left_input_box1_type, left_input_box1_id, left_input_box2_type, right_input_box1_type, right_input_box1_id, right_input_box2_type, right_input_box2_id, start_date);
CREATE UNIQUE INDEX unq_na_rule_ordinal ON not_allowed_rule (client_id, fund_config_id, ordinal);
COMMENT ON TABLE not_allowed_rule IS 'Not allowed rules for a client''s fund configuration';
COMMENT ON COLUMN not_allowed_rule.rule_type IS 'References the rule type for this not allowed rule';
COMMENT ON COLUMN not_allowed_rule.left_input_box1_type IS 'Corresponds to the value of the first input box; Possible values: all, Fund-Class set, Class set, Fund set, Class, Fund';
COMMENT ON COLUMN not_allowed_rule.left_input_box1_id IS 'The synthetic ID of the relevant Fund-Class set, Class set, Fund set, Class or Fund, or blank, if Left_InputBox1_Type = “all”. As this column can reference records in different tables, it is not an actual foreign key.';
COMMENT ON COLUMN not_allowed_rule.left_input_box2_type IS 'Corresponds to the value of the second input box; Possible values: all, Fund-Class set, Class set, Fund set, Class, Fund';
COMMENT ON COLUMN not_allowed_rule.left_input_box2_id IS 'The synthetic ID of the relevant Fund-Class set, Class set, Fund set, Class or Fund, or blank, if Left_InputBox2_Type = “all”. As this column can reference records in different tables, it is not an actual foreign key.';
COMMENT ON COLUMN not_allowed_rule.right_input_box1_type IS 'Corresponds to the value of the first input box; Possible values: all, Fund-Class set, Class set, Fund set, Class, Fund';
COMMENT ON COLUMN not_allowed_rule.right_input_box1_id IS 'The synthetic ID of the relevant Fund-Class set, Class set, Fund set, Class or Fund, or blank, if Right_InputBox1_Type = “all”. As this column can reference records in different tables, it is not an actual foreign key.';
COMMENT ON COLUMN not_allowed_rule.right_input_box2_type IS 'Corresponds to the value of the second input box; Possible values: all, Fund-Class set, Class set, Fund set, Class, Fund';
COMMENT ON COLUMN not_allowed_rule.right_input_box2_id IS 'The synthetic ID of the relevant Fund-Class set, Class set, Fund set, Class or Fund, or blank, if Right_InputBox1_Type = “all”. As this column can reference records in different tables, it is not an actual foreign key.';
COMMENT ON COLUMN not_allowed_rule.start_date IS 'The date as of which the rule became effective.';
COMMENT ON COLUMN not_allowed_rule.stop_date IS 'The date on which he rule was deleted.';
COMMENT ON COLUMN not_allowed_rule.ordinal IS 'Represents the display order of NA rules.';
CREATE TABLE not_allowed_rule_text (
	id BIGINT PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_not_allowed_rule_text_client REFERENCES client (id),
	rule_type VARCHAR(10) NOT NULL,
	language_code VARCHAR(3) NOT NULL,
	part1_text VARCHAR(50) NOT NULL,
	part2_text VARCHAR(50) NOT NULL,
	part3_text VARCHAR(50) NOT NULL,
	part4_text VARCHAR(50) NOT NULL,
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE not_allowed_rule_text_seq INCREMENT BY 1 START WITH 1 OWNED BY not_allowed_rule_text.id;
CREATE UNIQUE INDEX unq_na_rule_text ON not_allowed_rule_text (client_id, rule_type, language_code);
COMMENT ON TABLE not_allowed_rule_text IS 'This table stores the non-variable text that surrounds the user-selected components of each rules (ie. Transfers from X are not allowed into Y). For each client, there will be 3*a rules where 3 is the number of Rule Types and a is the number of client languages supported.';
COMMENT ON COLUMN not_allowed_rule_text.rule_type IS 'References the rule type for this not allowed rule for this rule text.';
COMMENT ON COLUMN not_allowed_rule_text.language_code IS 'The language code which will drive client localization.';
COMMENT ON COLUMN not_allowed_rule_text.part1_text IS 'First variable, textual component of a not-allowed rule.';
COMMENT ON COLUMN not_allowed_rule_text.part2_text IS 'Second variable, textual component of a not-allowed rule.';
COMMENT ON COLUMN not_allowed_rule_text.part3_text IS 'Third variable, textual component of a not-allowed rule.';
COMMENT ON COLUMN not_allowed_rule_text.part4_text IS 'Fourth variable, textual component of a not-allowed rule.';
CREATE TABLE filter_label (
	id BIGINT PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_filter_label_client REFERENCES client (id),
	language_code VARCHAR(3) NOT NULL,
	fund_label VARCHAR(20) NOT NULL,
	class_label VARCHAR(20) NOT NULL,
	fund_set_label VARCHAR(20) NOT NULL,
	class_set_label VARCHAR(20) NOT NULL,
	fund_class_set_label VARCHAR(20) NOT NULL,
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
CREATE SEQUENCE filter_label_seq INCREMENT BY 1 START WITH 1 OWNED BY filter_label.id;
CREATE UNIQUE INDEX unq_filter_label ON filter_label (client_id, language_code);
COMMENT ON TABLE filter_label IS 'This table stores (by client and version) the non-variable tags that precedes the X and Y variables.';
COMMENT ON COLUMN filter_label.language_code IS 'The language code which will drive client localization.';
COMMENT ON COLUMN filter_label.fund_label IS 'The label used in the application when filtering on funds.';
COMMENT ON COLUMN filter_label.class_label IS 'The label used in the application when filtering on classes.';
COMMENT ON COLUMN filter_label.fund_set_label IS 'The label used in the application when filtering on fund sets.';
COMMENT ON COLUMN filter_label.class_set_label IS 'The label used in the application when filtering on class sets.';
COMMENT ON COLUMN filter_label.fund_class_set_label IS 'The label used in the application when filtering on funds class sets.';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0005','NA Rules Tables','SQL','Major0003/V3.0005__NA_Rules_Tables.sql',37199543,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0006
-- --------------------------------------------------------------------
-- CAT-203 - fixing incorrect type
ALTER TABLE not_allowed_rule ALTER COLUMN right_input_box2_id TYPE BIGINT USING(right_input_box2_id :: integer);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0006','NA Rules Fix Right Input Id','SQL','Major0003/V3.0006__NA_Rules_Fix_Right_Input_Id.sql',-1912072968,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0007
-- --------------------------------------------------------------------
-- CAT-203 - make start and stop date an actual date as opposed to timestamps
ALTER TABLE not_allowed_rule ALTER COLUMN start_date TYPE DATE;
ALTER TABLE not_allowed_rule ALTER COLUMN stop_date TYPE DATE;
-- CAT-203 - lengthen label fields to accommodate longer labels
ALTER TABLE filter_label ALTER COLUMN fund_label TYPE VARCHAR(50);
ALTER TABLE filter_label ALTER COLUMN class_label TYPE VARCHAR(50);
ALTER TABLE filter_label ALTER COLUMN fund_set_label TYPE VARCHAR(50);
ALTER TABLE filter_label ALTER COLUMN class_set_label TYPE VARCHAR(50);
ALTER TABLE filter_label ALTER COLUMN fund_class_set_label TYPE VARCHAR(50);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0007','NA Rules Fix Lenght And Dates','SQL','Major0003/V3.0007__NA_Rules_Fix_Lenght_And_Dates.sql',-421885600,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0008
-- --------------------------------------------------------------------
-- add username field to system_user table
ALTER TABLE system_user ADD COLUMN username varchar(100);
UPDATE system_user SET username = first_name || last_name;
ALTER TABLE system_user ALTER COLUMN username SET NOT NULL;
CREATE UNIQUE INDEX unq_system_user_username ON system_user (username);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0008','Add Info To System User','SQL','Major0003/V3.0008__Add_Info_To_System_User.sql',-29322972,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 3.0009
-- --------------------------------------------------------------------
-- CAT-203: Make the rule operand types longer
ALTER TABLE not_allowed_rule ALTER COLUMN left_input_box1_type TYPE VARCHAR(25);
ALTER TABLE not_allowed_rule ALTER COLUMN left_input_box2_type TYPE VARCHAR(25);
ALTER TABLE not_allowed_rule ALTER COLUMN right_input_box1_type TYPE VARCHAR(25);
ALTER TABLE not_allowed_rule ALTER COLUMN right_input_box2_type TYPE VARCHAR(25);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'3.0009','Rules Fix Rule Type Length','SQL','Major0003/V3.0009__Rules_Fix_Rule_Type_Length.sql',270306306,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 4.0000
-- --------------------------------------------------------------------
CREATE TABLE setting_client_display_formats (
	id BIGINT PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_setting_client_display_formats_client REFERENCES client (id),
	fund_format VARCHAR(32),
	class_format VARCHAR(32)
);
CREATE SEQUENCE setting_client_display_formats_seq INCREMENT BY 1 START WITH 1 OWNED BY setting_client_display_formats.id;
ALTER TABLE setting_client_display_formats ADD CONSTRAINT chk_setting_client_display_formats_fund
	CHECK (fund_format in ('FUND_CODE', 'FUND_CODE_WITH_SHORT_NAME', 'FUND_CODE_WITH_MED_NAME'));
CREATE UNIQUE INDEX unq_setting_client_display_formats ON setting_client_display_formats (client_id);
CREATE TABLE setting_user_display_formats (
	id BIGINT PRIMARY KEY,
	user_id BIGINT NOT NULL  CONSTRAINT fk_setting_user_display_formats_user REFERENCES system_user (id),
	fund_format VARCHAR(32),
	class_format VARCHAR(32)
);
CREATE SEQUENCE setting_user_display_formats_seq INCREMENT BY 1 START WITH 1 OWNED BY setting_user_display_formats.id;
ALTER TABLE setting_user_display_formats ADD CONSTRAINT chk_setting_user_display_formats_fund
	CHECK (fund_format in ('FUND_CODE', 'FUND_CODE_WITH_SHORT_NAME', 'FUND_CODE_WITH_MED_NAME'));
CREATE UNIQUE INDEX unq_setting_user_display_formats ON setting_user_display_formats (user_id);
ALTER TABLE client ADD COLUMN lang_code VARCHAR(2);
UPDATE client SET lang_code = 'en';
ALTER TABLE client ALTER COLUMN lang_code SET NOT NULL;
ALTER TABLE client ADD CONSTRAINT chk_client_lang_code CHECK (lang_code in ('en', 'fr'));
ALTER TABLE system_user ADD COLUMN lang_code VARCHAR(2);
ALTER TABLE system_user ADD CONSTRAINT chk_system_user_lang_code CHECK (lang_code in ('en', 'fr'));
ALTER TABLE fund ADD COLUMN en_short_display_name VARCHAR(32);
ALTER TABLE fund ADD COLUMN fr_short_display_name VARCHAR(32);
ALTER TABLE fund ADD COLUMN en_med_display_name VARCHAR(64);
ALTER TABLE fund ADD COLUMN fr_med_display_name VARCHAR(64);
UPDATE fund SET
	en_short_display_name = fund_code,
	fr_short_display_name = fund_code,
	en_med_display_name = fund_code,
	fr_med_display_name = fund_code;
ALTER TABLE fund ALTER COLUMN en_short_display_name SET NOT NULL;
ALTER TABLE fund ALTER COLUMN fr_short_display_name SET NOT NULL;
ALTER TABLE fund ALTER COLUMN en_med_display_name SET NOT NULL;
ALTER TABLE fund ALTER COLUMN fr_med_display_name SET NOT NULL;
ALTER TABLE fund ADD COLUMN en_long_display_name VARCHAR(160);
ALTER TABLE fund ADD COLUMN fr_long_display_name VARCHAR(160);
DROP VIEW vwd_potential_transfer;
-- Added 12 display name columns. 6 per side of transfer. 
CREATE OR REPLACE VIEW vwd_potential_transfer (
	id, client_id, fund_config_id,
	from_fund_class_id, from_fund_code, from_class_code, to_fund_class_id, to_fund_code, to_class_code, transfer_rule_override_type,
	from_fund_en_short_display_name, from_fund_fr_short_display_name, from_fund_en_med_display_name, from_fund_fr_med_display_name, from_fund_en_long_display_name, from_fund_fr_long_display_name,
	to_fund_en_short_display_name, to_fund_fr_short_display_name, to_fund_en_med_display_name, to_fund_fr_med_display_name, to_fund_en_long_display_name, to_fund_fr_long_display_name
	)
	AS
SELECT
	vpt.client_id || '|' || vpt.fund_config_id || '|' || from_fund.fund_code || '|' || from_class.class_code || '|' || to_fund.fund_code || '|' || to_class.class_code as id,
	vpt.client_id,
	vpt.fund_config_id,
	vpt.from_fund_class_id,
	from_fund.fund_code,
	from_class.class_code,
	vpt.to_fund_class_id,
	to_fund.fund_code,
	to_class.class_code,
	tro.transfer_rule_override_type,
	from_fund.en_short_display_name,
	from_fund.fr_short_display_name,
	from_fund.en_med_display_name,
	from_fund.fr_med_display_name,
	from_fund.en_long_display_name,
	from_fund.fr_long_display_name,
	to_fund.en_short_display_name,
	to_fund.fr_short_display_name,
	to_fund.en_med_display_name,
	to_fund.fr_med_display_name,
	to_fund.en_long_display_name,
	to_fund.fr_long_display_name
FROM 
	vw_potential_transfer vpt
	INNER JOIN fund from_fund ON vpt.from_fund_id = from_fund.id
	INNER JOIN fund to_fund ON vpt.to_fund_id = to_fund.id        
	INNER JOIN class from_class ON vpt.from_class_id = from_class.id
	INNER JOIN class to_class ON vpt.to_class_id = to_class.id
	LEFT JOIN transfer_rule_override tro ON (vpt.from_fund_class_id = tro.from_fund_class_id
		AND vpt.to_fund_class_id = tro.to_fund_class_id
		AND vpt.client_id = tro.client_id
		AND vpt.fund_config_id = tro.fund_config_id)
;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'4.0000','Create Pref Table','SQL','Major0004/V4.0000__Create_Pref_Table.sql',-595208547,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 4.0001
-- --------------------------------------------------------------------
CREATE TABLE across_the_board_rule_type (
	rule_type VARCHAR(64) CONSTRAINT pk_across_the_board_rule_type PRIMARY KEY
);
INSERT INTO across_the_board_rule_type (rule_type) VALUES ('DISALLOW_SWITCHES_INTO_PURCHASE_CAPPED_FUND_CLASSES');
INSERT INTO across_the_board_rule_type (rule_type) VALUES ('ALLOW_IN_KIND_TRANSFERS');
INSERT INTO across_the_board_rule_type (rule_type) VALUES ('DISALLOW_ALL_SWITCHES_ACROSS_SPONSORS');
CREATE TABLE across_the_board_rule_value (
	rule_value VARCHAR(64) CONSTRAINT pk_across_the_board_rule_value PRIMARY KEY
);
INSERT INTO across_the_board_rule_value (rule_value) VALUES ('YES');
INSERT INTO across_the_board_rule_value (rule_value) VALUES ('NO');
INSERT INTO across_the_board_rule_value (rule_value) VALUES ('DISALLOW_EXCEPT_WITHIN_SAME_CLASS');
INSERT INTO across_the_board_rule_value (rule_value) VALUES ('DISALLOW_EXCEPT_WITHIN_SAME_FUND');
INSERT INTO across_the_board_rule_value (rule_value) VALUES ('ALWAYS');
INSERT INTO across_the_board_rule_value (rule_value) VALUES ('NOT_NECESSARILY');
CREATE TABLE across_the_board_rule (
	id BIGINT CONSTRAINT pk_across_the_board_rule PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_across_board_rule_client REFERENCES client (id),
	fund_config_id BIGINT NOT NULL CONSTRAINT fk_across_board_rule_fund_config REFERENCES fund_config(id),
	rule_type VARCHAR(64) NOT NULL CONSTRAINT fk_across_board_rule_type REFERENCES across_the_board_rule_type(rule_type),
	rule_value VARCHAR(64) NOT NULL CONSTRAINT fk_across_board_rule_value REFERENCES across_the_board_rule_value(rule_value),
	created_user_id BIGINT NOT NULL CONSTRAINT fk_across_board_rule_created_by REFERENCES system_user(id),
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL CONSTRAINT fk_across_board_rule_updated_by REFERENCES system_user(id),
	last_updated_date TIMESTAMP NOT NULL
);
CREATE UNIQUE INDEX unq_across_the_board_rule ON across_the_board_rule (client_id, fund_config_id, rule_type, rule_value);
CREATE SEQUENCE across_the_board_rule_seq INCREMENT BY 1 START WITH 1 OWNED BY across_the_board_rule.id;
ALTER TABLE across_the_board_rule ADD CONSTRAINT chk_across_the_board_rule_typeandvalue
	CHECK (
		(rule_type = 'DISALLOW_SWITCHES_INTO_PURCHASE_CAPPED_FUND_CLASSES' AND rule_value IN ('YES', 'NO', 'DISALLOW_EXCEPT_WITHIN_SAME_CLASS', 'DISALLOW_EXCEPT_WITHIN_SAME_FUND'))
			OR
		(rule_type = 'ALLOW_IN_KIND_TRANSFERS' AND rule_value IN ('ALWAYS', 'NOT_NECESSARILY'))
			OR
		(rule_type = 'DISALLOW_ALL_SWITCHES_ACROSS_SPONSORS' AND rule_value IN ('YES', 'NO'))
	);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'4.0001','Create Across the Board Rule Tables','SQL','Major0004/V4.0001__Create_Across_the_Board_Rule_Tables.sql',-589744249,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 4.0002
-- --------------------------------------------------------------------
-- delete the cached data
DELETE FROM fund_config_cmp_result;
DELETE FROM fund_config_cmp_result_header;
ALTER TABLE fund_config_cmp_result
	ADD COLUMN from_fund_en_short_display_name VARCHAR(32) NOT NULL,
	ADD COLUMN from_fund_en_med_display_name VARCHAR(64) NOT NULL,
	ADD COLUMN from_fund_en_long_display_name VARCHAR(160),
	ADD COLUMN from_fund_fr_short_display_name VARCHAR(32) NOT NULL,
	ADD COLUMN from_fund_fr_med_display_name VARCHAR(64) NOT NULL,
	ADD COLUMN from_fund_fr_long_display_name VARCHAR(160),
	ADD COLUMN to_fund_en_short_display_name VARCHAR(32) NOT NULL,
	ADD COLUMN to_fund_en_med_display_name VARCHAR(64) NOT NULL,
	ADD COLUMN to_fund_en_long_display_name VARCHAR(160),
	ADD COLUMN to_fund_fr_short_display_name VARCHAR(32) NOT NULL,
	ADD COLUMN to_fund_fr_med_display_name VARCHAR(64) NOT NULL,
	ADD COLUMN to_fund_fr_long_display_name VARCHAR(160);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'4.0002','Add Display Columns To Cmp Results','SQL','Major0004/V4.0002__Add_Display_Columns_To_Cmp_Results.sql',-527074956,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 4.0003
-- --------------------------------------------------------------------
-- Added from/to fund id & class id fields as passthru from underlying view. 
DROP VIEW vwd_potential_transfer;
CREATE OR REPLACE VIEW vwd_potential_transfer AS
SELECT
	vpt.client_id || '|' || vpt.fund_config_id || '|' || from_fund.fund_code || '|' || from_class.class_code || '|' || to_fund.fund_code || '|' || to_class.class_code as id,
	vpt.client_id,
	vpt.fund_config_id,
	vpt.from_fund_class_id,
	vpt.from_fund_id,
	from_fund.fund_code as from_fund_code,
	vpt.from_class_id,
	from_class.class_code as from_class_code,
	vpt.to_fund_class_id,
	vpt.to_fund_id,
	to_fund.fund_code as to_fund_code,
	vpt.to_class_id,
	to_class.class_code as to_class_code,
	tro.transfer_rule_override_type,
	from_fund.en_short_display_name as from_fund_en_short_display_name,
	from_fund.fr_short_display_name as from_fund_fr_short_display_name,
	from_fund.en_med_display_name as from_fund_en_med_display_name,
	from_fund.fr_med_display_name as from_fund_fr_med_display_name,
	from_fund.en_long_display_name as from_fund_en_long_display_name,
	from_fund.fr_long_display_name as from_fund_fr_long_display_name,
	to_fund.en_short_display_name as to_fund_en_short_display_name,
	to_fund.fr_short_display_name as to_fund_fr_short_display_name,
	to_fund.en_med_display_name as to_fund_en_med_display_name,
	to_fund.fr_med_display_name as to_fund_fr_med_display_name,
	to_fund.en_long_display_name as to_fund_en_long_display_name,
	to_fund.fr_long_display_name as to_fund_fr_long_display_name
FROM 
	vw_potential_transfer vpt
	INNER JOIN fund from_fund ON vpt.from_fund_id = from_fund.id
	INNER JOIN fund to_fund ON vpt.to_fund_id = to_fund.id        
	INNER JOIN class from_class ON vpt.from_class_id = from_class.id
	INNER JOIN class to_class ON vpt.to_class_id = to_class.id
	LEFT JOIN transfer_rule_override tro ON (vpt.from_fund_class_id = tro.from_fund_class_id
		AND vpt.to_fund_class_id = tro.to_fund_class_id
		AND vpt.client_id = tro.client_id
		AND vpt.fund_config_id = tro.fund_config_id)
;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'4.0003','Add Ids To Vwd Pot Transfer','SQL','Major0004/V4.0003__Add_Ids_To_Vwd_Pot_Transfer.sql',-865888728,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 4.0004
-- --------------------------------------------------------------------
-- CAT-203 - Not Allowed Rules
-- prefix settings table with setting
ALTER TABLE filter_label RENAME TO setting_filter_label;
-- rename primary key
ALTER INDEX filter_label_pkey RENAME TO pk_setting_filter_label;
--rename fk to client
ALTER TABLE setting_filter_label RENAME CONSTRAINT fk_filter_label_client TO fk_setting_filter_label_client; 
-- rename sequence
ALTER SEQUENCE filter_label_seq RENAME to setting_filter_label_seq;
-- prefix settings table with setting
ALTER TABLE not_allowed_rule_text RENAME TO setting_not_allowed_rule_text;
-- rename primary key
ALTER INDEX not_allowed_rule_text_pkey RENAME TO pk_setting_not_allowed_rule_text;
-- rename fk to client
ALTER TABLE setting_not_allowed_rule_text RENAME CONSTRAINT fk_not_allowed_rule_text_client to fk_setting_not_allowed_rule_text_client;
-- rename sequence
ALTER SEQUENCE not_allowed_rule_text_seq RENAME to setting_not_allowed_rule_text_seq;
CREATE TABLE fund_class_criterion_type (
	fund_class_criterion_type  VARCHAR(20) CONSTRAINT pk_fund_class_criterion_type PRIMARY KEY
);
INSERT INTO fund_class_criterion_type (fund_class_criterion_type) VALUES ('UNRESTRICTED');
INSERT INTO fund_class_criterion_type (fund_class_criterion_type) VALUES ('FUND');
INSERT INTO fund_class_criterion_type (fund_class_criterion_type) VALUES ('CLASS');
INSERT INTO fund_class_criterion_type (fund_class_criterion_type) VALUES ('FUND_SET');
INSERT INTO fund_class_criterion_type (fund_class_criterion_type) VALUES ('CLASS_SET');
INSERT INTO fund_class_criterion_type (fund_class_criterion_type) VALUES ('FUND_CLASS_SET');
-- deleting OK from not_allowed_rule table since this story is still in-progress
DELETE FROM not_allowed_rule;
ALTER TABLE not_allowed_rule ADD CONSTRAINT fk_na_rule_fcc_type_left_box_1 FOREIGN KEY (left_input_box1_type) REFERENCES fund_class_criterion_type(fund_class_criterion_type);
ALTER TABLE not_allowed_rule ADD CONSTRAINT fk_na_rule_fcc_type_left_box_2 FOREIGN KEY (left_input_box2_type) REFERENCES fund_class_criterion_type(fund_class_criterion_type);
ALTER TABLE not_allowed_rule ADD CONSTRAINT fk_na_rule_fcc_type_right_box_1 FOREIGN KEY (right_input_box1_type) REFERENCES fund_class_criterion_type(fund_class_criterion_type);
ALTER TABLE not_allowed_rule ADD CONSTRAINT fk_na_rule_fcc_type_right_box_2 FOREIGN KEY (right_input_box2_type) REFERENCES fund_class_criterion_type(fund_class_criterion_type);
CREATE TABLE not_allowed_rule_type (
	not_allowed_rule_type  VARCHAR(20) CONSTRAINT pk_not_allowed_rule_type PRIMARY KEY
);
INSERT INTO not_allowed_rule_type (not_allowed_rule_type) VALUES ('TYPE1');
INSERT INTO not_allowed_rule_type (not_allowed_rule_type) VALUES ('TYPE2');
INSERT INTO not_allowed_rule_type (not_allowed_rule_type) VALUES ('TYPE3');
ALTER TABLE not_allowed_rule ADD CONSTRAINT fk_na_rule_na_rule_type FOREIGN KEY (rule_type) REFERENCES not_allowed_rule_type(not_allowed_rule_type);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'4.0004','Rename NA Rule Config Tables','SQL','Major0004/V4.0004__Rename_NA_Rule_Config_Tables.sql',224280815,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 4.0005
-- --------------------------------------------------------------------
CREATE OR REPLACE VIEW vwd_fund_class AS
SELECT
	fc.id,
	fc.client_id,
 	fc.fund_config_id,
	fc.fund_id,
	f.fund_code,
	f.english_name_short AS fund_english_name_short,   
	f.french_name_short AS fund_french_name_short,
	f.english_name_medium AS fund_english_name_medium,
	f.french_name_medium AS fund_french_name_medium,
	f.english_name_long AS fund_english_name_long,
	f.french_name_long AS fund_french_name_long,
	f.en_short_display_name AS fund_en_short_display_name,
	f.fr_short_display_name AS fund_fr_short_display_name,
	f.en_med_display_name AS fund_en_med_display_name,
	f.fr_med_display_name AS fund_fr_med_display_name,
	f.en_long_display_name AS fund_en_long_display_name,
	f.fr_long_display_name AS fund_fr_long_display_name,
	fc.class_id,
	c.class_code,
	c.name AS class_name,
	c.english_name AS class_english_name,
	c.french_name AS class_french_name,
 	fc.fundserv_code,
 	fc.name AS fund_class_name
FROM
	fund_class fc
	INNER JOIN fund f  ON f.id = fc.fund_id
	INNER JOIN class c ON c.id = fc.class_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'4.0005','Create Fund Class View','SQL','Major0004/V4.0005__Create_Fund_Class_View.sql',1004619700,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 4.0006
-- --------------------------------------------------------------------
select setval('fund_config_seq', max(id)) from fund_config;
select setval('across_the_board_rule_seq', max(id)) from across_the_board_rule;
select setval('associated_fund_seq', max(id)) from associated_fund;
select setval('class_seq', max(id)) from class;
select setval('client_seq', max(id)) from client;
select setval('setting_client_display_formats_seq', max(id)) from setting_client_display_formats;
select setval('dcaf_transfer_seq', max(id)) from dcaf_transfer;
select setval('environment_adapter_seq', max(id)) from environment_adapter;
select setval('fund_seq', max(id)) from fund;
select setval('fund_class_seq', max(id)) from fund_class;
select setval('fund_config_cmp_result_seq', max(id)) from fund_config_cmp_result;
select setval('fund_config_cmp_result_header_seq', max(id)) from fund_config_cmp_result_header;
select setval('not_allowed_rule_seq', max(id)) from not_allowed_rule;
select setval('published_fund_config_seq', max(id)) from published_fund_config;
select setval('setting_filter_label_seq', max(id)) from setting_filter_label;
select setval('setting_not_allowed_rule_text_seq', max(id)) from setting_not_allowed_rule_text;
select setval('system_user_seq', max(id)) from system_user;
select setval('transfer_rule_override_seq', max(id)) from transfer_rule_override;
select setval('setting_user_display_formats_seq', max(id)) from setting_user_display_formats;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'4.0006','Realign Sequences','SQL','Major0004/V4.0006__Realign_Sequences.sql',1302305327,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0000
-- --------------------------------------------------------------------
-- Change existing tables to be BIGSERIAL types
-- renaming sequences to match the default sequence name generatd by BIGSERIAL
ALTER SEQUENCE across_the_board_rule_seq 			RENAME TO across_the_board_rule_id_seq;
ALTER SEQUENCE associated_fund_seq       			RENAME TO associated_fund_id_seq;
ALTER SEQUENCE class_seq 				 			RENAME TO class_id_seq;
ALTER SEQUENCE client_seq 							RENAME TO client_id_seq;
ALTER SEQUENCE dcaf_transfer_seq 					RENAME TO dcaf_transfer_id_seq;
ALTER SEQUENCE environment_adapter_seq				RENAME TO environment_adapter_id_seq;
ALTER SEQUENCE fund_seq								RENAME TO fund_id_seq;
ALTER SEQUENCE fund_class_seq						RENAME TO fund_class_id_seq;
ALTER SEQUENCE fund_config_cmp_result_header_seq	RENAME TO fund_config_cmp_result_header_id_seq;
ALTER SEQUENCE fund_config_cmp_result_seq			RENAME TO fund_config_cmp_result_id_seq;
ALTER SEQUENCE fund_config_seq						RENAME TO fund_config_id_seq;
ALTER SEQUENCE not_allowed_rule_seq					RENAME TO not_allowed_rule_id_seq;
ALTER SEQUENCE publish_event_log_seq				RENAME TO publish_event_log_id_seq;
ALTER SEQUENCE published_fund_config_seq			RENAME TO published_fund_config_id_seq;
ALTER SEQUENCE setting_client_display_formats_seq	RENAME TO setting_client_display_formats_id_seq;
ALTER SEQUENCE setting_filter_label_seq				RENAME TO setting_filter_label_id_seq;
ALTER SEQUENCE setting_not_allowed_rule_text_seq	RENAME TO setting_not_allowed_rule_text_id_seq;
ALTER SEQUENCE setting_user_display_formats_seq		RENAME TO setting_user_display_formats_id_seq;
ALTER SEQUENCE system_user_seq						RENAME TO system_user_id_seq;
ALTER SEQUENCE transfer_rule_override_seq			RENAME TO transfer_rule_override_id_seq;
-- set the default values 
ALTER TABLE across_the_board_rule   ALTER COLUMN id SET DEFAULT nextval('across_the_board_rule_id_seq');
ALTER TABLE associated_fund			ALTER COLUMN id SET DEFAULT nextval('associated_fund_id_seq');
ALTER TABLE class					ALTER COLUMN id SET DEFAULT nextval('class_id_seq');
ALTER TABLE client                  ALTER COLUMN id SET DEFAULT nextval('client_id_seq');
ALTER TABLE dcaf_transfer			ALTER COLUMN id SET DEFAULT nextval('dcaf_transfer_id_seq');
ALTER TABLE environment_adapter		ALTER COLUMN id SET DEFAULT nextval('environment_adapter_id_seq');
ALTER TABLE fund					ALTER COLUMN id SET DEFAULT nextval('fund_id_seq');
ALTER TABLE fund_class				ALTER COLUMN id SET DEFAULT nextval('fund_class_id_seq');
ALTER TABLE fund_config				ALTER COLUMN id SET DEFAULT nextval('fund_config_id_seq');
ALTER TABLE fund_config_cmp_result	ALTER COLUMN id SET DEFAULT nextval('fund_config_cmp_result_id_seq');
ALTER TABLE fund_config_cmp_result_header	ALTER COLUMN id SET DEFAULT nextval('fund_config_cmp_result_header_id_seq');
ALTER TABLE not_allowed_rule		ALTER COLUMN id SET DEFAULT nextval('not_allowed_rule_id_seq');
ALTER TABLE published_fund_config	ALTER COLUMN id SET DEFAULT nextval('published_fund_config_id_seq');
ALTER TABLE publish_event_log		ALTER COLUMN id SET DEFAULT nextval('publish_event_log_id_seq'); 
ALTER TABLE setting_client_display_formats	ALTER COLUMN id SET DEFAULT nextval('setting_client_display_formats_id_seq');
ALTER TABLE setting_filter_label	ALTER COLUMN id SET DEFAULT nextval('setting_filter_label_id_seq');
ALTER TABLE setting_not_allowed_rule_text	ALTER COLUMN id SET DEFAULT nextval('setting_not_allowed_rule_text_id_seq');
ALTER TABLE setting_user_display_formats	ALTER COLUMN id SET DEFAULT nextval('setting_user_display_formats_id_seq');
ALTER TABLE system_user				ALTER COLUMN id SET DEFAULT nextval('system_user_id_seq');
ALTER TABLE transfer_rule_override	ALTER COLUMN id SET DEFAULT nextval('transfer_rule_override_id_seq');

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0000','Use Bigserial','SQL','Major0005/V5.0000__Use_Bigserial.sql',-1084421514,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0001
-- --------------------------------------------------------------------
CREATE TABLE fundset (
	id BIGSERIAL CONSTRAINT pk_fundset PRIMARY KEY,
	fund_config_id BIGINT  NOT NULL CONSTRAINT fk_fundset_fundcfg REFERENCES fund_config (id),
	name VARCHAR(64) NOT NULL,
	description VARCHAR(256),
	created_user_id BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL,
	last_updated_date TIMESTAMP NOT NULL
);
ALTER TABLE fundset ADD CONSTRAINT unq_fundset_fund_config_name UNIQUE (fund_config_id, name);
CREATE TABLE fundset_fund (
	id BIGSERIAL CONSTRAINT pk_fundset_fund PRIMARY KEY,
	fundset_id BIGINT NOT NULL CONSTRAINT fk_fundset_fund_fundset REFERENCES fundset(id),
	fund_code VARCHAR(10) NOT NULL
);
ALTER TABLE fundset_fund ADD CONSTRAINT unq_fundset_fund_fundset_fund UNIQUE (fundset_id, fund_code);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0001','Create Fundset Table','SQL','Major0005/V5.0001__Create_Fundset_Table.sql',2062215922,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0002
-- --------------------------------------------------------------------
ALTER TABLE fund ADD COLUMN fund_group VARCHAR(12), ADD COLUMN fund_category VARCHAR(2);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0002','Add FundGroup FundCategory','SQL','Major0005/V5.0002__Add_FundGroup_FundCategory.sql',-962286311,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0003
-- --------------------------------------------------------------------
UPDATE setting_client_display_formats SET class_format = null WHERE class_format is not null;
ALTER TABLE setting_client_display_formats ADD CONSTRAINT chk_setting_client_display_formats_class
	CHECK (class_format in ('CLASS_CODE', 'CLASS_CODE_WITH_NAME'));
UPDATE setting_user_display_formats SET class_format = null WHERE class_format is not null;
ALTER TABLE setting_user_display_formats ADD CONSTRAINT chk_setting_user_display_formats_class
	CHECK (class_format in ('CLASS_CODE', 'CLASS_CODE_WITH_NAME'));
ALTER TABLE class ADD COLUMN en_display_name VARCHAR(100);
ALTER TABLE class ADD COLUMN fr_display_name VARCHAR(100);
UPDATE class SET en_display_name = class_code, fr_display_name = class_code;
ALTER TABLE class ALTER COLUMN en_display_name SET NOT NULL;
ALTER TABLE class ALTER COLUMN fr_display_name SET NOT NULL;
DROP VIEW vwd_potential_transfer;
-- Add class display name columns, 2 per side of transfer. 
CREATE OR REPLACE VIEW vwd_potential_transfer AS
SELECT
	vpt.client_id || '|' || vpt.fund_config_id || '|' || from_fund.fund_code || '|' || from_class.class_code || '|' || to_fund.fund_code || '|' || to_class.class_code as id,
	vpt.client_id,
	vpt.fund_config_id,
	vpt.from_fund_class_id,
	vpt.from_fund_id,
	from_fund.fund_code as from_fund_code,
	vpt.from_class_id,
	from_class.class_code as from_class_code,
	vpt.to_fund_class_id,
	vpt.to_fund_id,
	to_fund.fund_code as to_fund_code,
	vpt.to_class_id,
	to_class.class_code as to_class_code,
	tro.transfer_rule_override_type,
	from_fund.en_short_display_name as from_fund_en_short_display_name,
	from_fund.fr_short_display_name as from_fund_fr_short_display_name,
	from_fund.en_med_display_name as from_fund_en_med_display_name,
	from_fund.fr_med_display_name as from_fund_fr_med_display_name,
	from_fund.en_long_display_name as from_fund_en_long_display_name,
	from_fund.fr_long_display_name as from_fund_fr_long_display_name,
	from_class.en_display_name as from_class_en_display_name,
	from_class.fr_display_name as from_class_fr_display_name,
	to_fund.en_short_display_name as to_fund_en_short_display_name,
	to_fund.fr_short_display_name as to_fund_fr_short_display_name,
	to_fund.en_med_display_name as to_fund_en_med_display_name,
	to_fund.fr_med_display_name as to_fund_fr_med_display_name,
	to_fund.en_long_display_name as to_fund_en_long_display_name,
	to_fund.fr_long_display_name as to_fund_fr_long_display_name,
	to_class.en_display_name as to_class_en_display_name,
	to_class.fr_display_name as to_class_fr_display_name
FROM 
	vw_potential_transfer vpt
	INNER JOIN fund from_fund ON vpt.from_fund_id = from_fund.id
	INNER JOIN fund to_fund ON vpt.to_fund_id = to_fund.id        
	INNER JOIN class from_class ON vpt.from_class_id = from_class.id
	INNER JOIN class to_class ON vpt.to_class_id = to_class.id
	LEFT JOIN transfer_rule_override tro ON (vpt.from_fund_class_id = tro.from_fund_class_id
		AND vpt.to_fund_class_id = tro.to_fund_class_id
		AND vpt.client_id = tro.client_id
		AND vpt.fund_config_id = tro.fund_config_id)
;
-- Add 2 class display name columns. 
DROP VIEW vwd_fund_class;
CREATE OR REPLACE VIEW vwd_fund_class AS
SELECT
	fc.id,
	fc.client_id,
 	fc.fund_config_id,
	fc.fund_id,
	f.fund_code,
	f.english_name_short AS fund_english_name_short,   
	f.french_name_short AS fund_french_name_short,
	f.english_name_medium AS fund_english_name_medium,
	f.french_name_medium AS fund_french_name_medium,
	f.english_name_long AS fund_english_name_long,
	f.french_name_long AS fund_french_name_long,
	f.en_short_display_name AS fund_en_short_display_name,
	f.fr_short_display_name AS fund_fr_short_display_name,
	f.en_med_display_name AS fund_en_med_display_name,
	f.fr_med_display_name AS fund_fr_med_display_name,
	f.en_long_display_name AS fund_en_long_display_name,
	f.fr_long_display_name AS fund_fr_long_display_name,
	fc.class_id,
	c.class_code,
	c.name AS class_name,
	c.english_name AS class_english_name,
	c.french_name AS class_french_name,
	c.en_display_name AS class_en_display_name,
	c.fr_display_name AS class_fr_display_name,
 	fc.fundserv_code,
 	fc.name AS fund_class_name
FROM
	fund_class fc
	INNER JOIN fund f  ON f.id = fc.fund_id
	INNER JOIN class c ON c.id = fc.class_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0003','Add Class Display Names','SQL','Major0005/V5.0003__Add_Class_Display_Names.sql',826449930,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0004
-- --------------------------------------------------------------------
drop view vwd_potential_transfer;
drop view vw_potential_transfer;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0004','Remove Potential Transfer Views','SQL','Major0005/V5.0004__Remove_Potential_Transfer_Views.sql',1547191705,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0005
-- --------------------------------------------------------------------
-- add new possible class name display format
ALTER TABLE setting_client_display_formats DROP CONSTRAINT chk_setting_client_display_formats_class;
ALTER TABLE setting_client_display_formats ADD CONSTRAINT chk_setting_client_display_formats_class
	CHECK (class_format in ('CLASS_CODE', 'CLASS_CODE_WITH_NAME', 'CLASS_NAME'));
ALTER TABLE setting_user_display_formats DROP CONSTRAINT chk_setting_user_display_formats_class;
ALTER TABLE setting_user_display_formats ADD CONSTRAINT chk_setting_user_display_formats_class
	CHECK (class_format in ('CLASS_CODE', 'CLASS_CODE_WITH_NAME', 'CLASS_NAME'));

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0005','Add Class Display Name Format','SQL','Major0005/V5.0005__Add_Class_Display_Name_Format.sql',1957095807,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0006
-- --------------------------------------------------------------------
-- CAT-111: Renaming fund group column to fund sponsor
ALTER TABLE fund RENAME COLUMN fund_group to fund_sponsor;
-- CAT-111: Renaming fund category column to fund category code
ALTER TABLE fund RENAME COLUMN fund_category to fund_category_code;
-- CAT-111: Adding fund category column that contains the category description for the corresponding category code
ALTER TABLE fund ADD COLUMN fund_category_desc VARCHAR(80);
-- CAT-111: Adding an ordinal to order sets by
DELETE FROM fundset;
ALTER TABLE fundset ADD COLUMN ordinal BIGINT NOT NULL;
CREATE VIEW vw_fundset_fund
	AS
SELECT 
	ff.id as fund_set_id, 
	fs.fund_config_id, 
	f.fund_code, 
	f.en_short_display_name, 
	f.en_med_display_name, 
	f.en_long_display_name, 
	f.fr_short_display_name, 
	f.fr_med_display_name, 
	f.fr_long_display_name,
	f.fund_sponsor,
	f.fund_category_desc
FROM fundset fs
INNER JOIN fundset_fund ff ON fs.id = ff.fundset_id
INNER JOIN fund f ON ff.fund_code = f.fund_code;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0006','AddViewForFundSetFunds','SQL','Major0005/V5.0006__AddViewForFundSetFunds.sql',181075951,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0007
-- --------------------------------------------------------------------
-- CAT-111: Making sure to retrieve funds that match the fund set's fund config id
--			Making sure construct a column on the view that can be used as an id
DROP VIEW vw_fundset_fund;
CREATE OR REPLACE VIEW vw_fundset_fund
	AS
SELECT 
    fs.id || '|' || fs.fund_config_id || '|' || ff.fund_code as id,
	fs.id as fund_set_id, 
	fs.fund_config_id, 
	f.fund_code, 
	f.en_short_display_name, 
	f.en_med_display_name, 
	f.en_long_display_name, 
	f.fr_short_display_name, 
	f.fr_med_display_name, 
	f.fr_long_display_name,
	f.fund_sponsor,
	f.fund_category_desc
FROM fundset fs
INNER JOIN fundset_fund ff ON fs.id = ff.fundset_id
INNER JOIN fund f ON ff.fund_code = f.fund_code AND f.fund_config_id = fs.fund_config_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0007','AddIdToViewForFundSets','SQL','Major0005/V5.0007__AddIdToViewForFundSets.sql',1125154750,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0008
-- --------------------------------------------------------------------
-- CAT-111: Renaming views as per our standard 'vwd' prefix
DROP VIEW vw_fundset_fund;
CREATE VIEW vwd_fundset_fund
	AS
SELECT 
    fs.id || '|' || fs.fund_config_id || '|' || ff.fund_code as id,
	fs.id as fund_set_id, 
	fs.fund_config_id, 
	f.fund_code, 
	f.en_short_display_name, 
	f.en_med_display_name, 
	f.en_long_display_name, 
	f.fr_short_display_name, 
	f.fr_med_display_name, 
	f.fr_long_display_name,
	f.fund_sponsor,
	f.fund_category_desc
FROM fundset fs
INNER JOIN fundset_fund ff ON fs.id = ff.fundset_id
INNER JOIN fund f ON ff.fund_code = f.fund_code AND f.fund_config_id = fs.fund_config_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0008','RenameFundSetFundView','SQL','Major0005/V5.0008__RenameFundSetFundView.sql',-1543378026,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0009
-- --------------------------------------------------------------------
-- CAT-231: add new class name display columns
DELETE FROM fund_config_cmp_result;
DELETE FROM fund_config_cmp_result_header;
ALTER TABLE fund_config_cmp_result 
	ADD COLUMN from_class_english_name VARCHAR(80),
	ADD COLUMN from_class_french_name VARCHAR(80),
	ADD COLUMN from_class_en_display_name VARCHAR(100) NOT NULL,
	ADD COLUMN from_class_fr_display_name VARCHAR(100) NOT NULL,
	ADD COLUMN to_class_english_name VARCHAR(80),
	ADD COLUMN to_class_french_name VARCHAR(80),
	ADD COLUMN to_class_en_display_name VARCHAR(100) NOT NULL,
	ADD COLUMN to_class_fr_display_name VARCHAR(100) NOT NULL;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0009','Add Class Display Cols To Cmp Results','SQL','Major0005/V5.0009__Add_Class_Display_Cols_To_Cmp_Results.sql',-95952874,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0010
-- --------------------------------------------------------------------
-- CAT-111
ALTER TABLE fund ADD COLUMN effective_date DATE, ADD COLUMN stop_date DATE;
-- CAT-111: defaulting effective and stop dates to some reasonable values 
UPDATE fund SET effective_date = current_date, stop_date = '9999-12-31';
ALTER TABLE fund ALTER COLUMN effective_date SET NOT NULL;
ALTER TABLE fund ALTER COLUMN stop_date SET NOT NULL;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0010','Add StopDate EffectiveDate To Fund','SQL','Major0005/V5.0010__Add_StopDate_EffectiveDate_To_Fund.sql',581072012,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0011
-- --------------------------------------------------------------------
-- Remove class name column from view
DROP VIEW vwd_fund_class;
CREATE OR REPLACE VIEW vwd_fund_class AS
SELECT
	fc.id,
	fc.client_id,
 	fc.fund_config_id,
	fc.fund_id,
	f.fund_code,
	f.english_name_short AS fund_english_name_short,   
	f.french_name_short AS fund_french_name_short,
	f.english_name_medium AS fund_english_name_medium,
	f.french_name_medium AS fund_french_name_medium,
	f.english_name_long AS fund_english_name_long,
	f.french_name_long AS fund_french_name_long,
	f.en_short_display_name AS fund_en_short_display_name,
	f.fr_short_display_name AS fund_fr_short_display_name,
	f.en_med_display_name AS fund_en_med_display_name,
	f.fr_med_display_name AS fund_fr_med_display_name,
	f.en_long_display_name AS fund_en_long_display_name,
	f.fr_long_display_name AS fund_fr_long_display_name,
	fc.class_id,
	c.class_code,
	c.english_name AS class_english_name,
	c.french_name AS class_french_name,
	c.en_display_name AS class_en_display_name,
	c.fr_display_name AS class_fr_display_name,
 	fc.fundserv_code,
 	fc.name AS fund_class_name
FROM
	fund_class fc
	INNER JOIN fund f  ON f.id = fc.fund_id
	INNER JOIN class c ON c.id = fc.class_id;
ALTER TABLE class DROP COLUMN name; 

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0011','Drop Class Name Col','SQL','Major0005/V5.0011__Drop_Class_Name_Col.sql',-1632920028,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 5.0012
-- --------------------------------------------------------------------
-- CAT-111
DROP VIEW vwd_fundset_fund;
-- added effective date and stop date
CREATE VIEW vwd_fundset_fund
	AS
SELECT 
    fs.id || '|' || fs.fund_config_id || '|' || ff.fund_code as id,
	fs.id as fund_set_id, 
	fs.fund_config_id, 
	f.fund_code, 
	f.en_short_display_name, 
	f.en_med_display_name, 
	f.en_long_display_name, 
	f.fr_short_display_name, 
	f.fr_med_display_name, 
	f.fr_long_display_name,
	f.fund_sponsor,
	f.fund_category_desc,
	f.effective_date,	-- [added]
	f.stop_date			-- [added]
FROM fundset fs
INNER JOIN fundset_fund ff ON fs.id = ff.fundset_id
INNER JOIN fund f ON ff.fund_code = f.fund_code AND f.fund_config_id = fs.fund_config_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'5.0012','Add StopDate EffectiveDate ViewForFundSetFunds','SQL','Major0005/V5.0012__Add_StopDate_EffectiveDate_ViewForFundSetFunds.sql',-2108761218,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 6.0000
-- --------------------------------------------------------------------
-- CAT-175 - Adding domestic/international indicator to the client table
ALTER TABLE client ADD COLUMN indicator VARCHAR(25);
-- defaulting to reasonable value
UPDATE client SET indicator = 'INTERNATIONAL';
ALTER TABLE client ALTER COLUMN indicator SET NOT NULL;
ALTER TABLE client ADD CONSTRAINT chk_client_indicator CHECK (indicator in ('DOMESTIC', 'INTERNATIONAL'));

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'6.0000','AddClientIndicator','SQL','Major0006/V6.0000__AddClientIndicator.sql',-36970770,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 6.0001
-- --------------------------------------------------------------------
CREATE TABLE fund_config_stats (
	id BIGSERIAL CONSTRAINT pk_fund_config_stats PRIMARY KEY,
	fund_config_id BIGINT  NOT NULL CONSTRAINT fk_fund_config_stats_fundcfg REFERENCES fund_config (id),
	fund_count BIGINT NOT NULL,
	fund_class_count BIGINT NOT NULL,
	allowed_by_rules BIGINT NOT NULL,
	allowed_by_override BIGINT NOT NULL,
	not_allowed_by_rules BIGINT NOT NULL,
	not_allowed_by_override BIGINT NOT NULL,
	created_date TIMESTAMP NOT NULL
);
COMMENT ON TABLE fund_config_stats IS 'Computed statistics for a fund configuration';
ALTER TABLE fund_config_stats ADD CONSTRAINT unq_fund_config_stats UNIQUE (fund_config_id);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'6.0001','Create Fund Config Stats Table','SQL','Major0006/V6.0001__Create_Fund_Config_Stats_Table.sql',66053290,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 6.0002
-- --------------------------------------------------------------------
DELETE FROM fund_config_cmp_result;
DELETE FROM fund_config_cmp_result_header;
CREATE UNIQUE INDEX unq_fund_config_cmp_result_header ON fund_config_cmp_result_header(fund_config_id_base, fund_config_id_target);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'6.0002','Add Unique Comparison Header','SQL','Major0006/V6.0002__Add_Unique_Comparison_Header.sql',1624924907,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 6.0003
-- --------------------------------------------------------------------
--CAT-92: Add fund config child audit table for better calculation of max last updated date for fund config.
CREATE TABLE fund_config_child_audit (
	id BIGSERIAL CONSTRAINT pk_fund_config_child_audit PRIMARY KEY,
	fund_config_id BIGINT  NOT NULL CONSTRAINT fk_fund_config_child_audit_fundcfg REFERENCES fund_config (id),
	created_date TIMESTAMP NOT NULL
);
COMMENT ON TABLE fund_config_child_audit IS 'Track changes to important children of fund config';
CREATE FUNCTION fn_insert_fund_config_child_audit() RETURNS trigger AS $$
    BEGIN
         IF (TG_OP = 'DELETE') THEN
     		INSERT INTO fund_config_child_audit (fund_config_id, created_date) values (OLD.fund_config_id, now());
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
      		INSERT INTO fund_config_child_audit (fund_config_id, created_date) values (NEW.fund_config_id, now());
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
     		INSERT INTO fund_config_child_audit (fund_config_id, created_date) values (NEW.fund_config_id, now());
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trig_transfer_rule_override_update
    AFTER UPDATE OR DELETE OR INSERT ON transfer_rule_override
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_child_audit();
CREATE TRIGGER trig_not_allowed_rule_update
    AFTER UPDATE OR DELETE OR INSERT ON not_allowed_rule
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_child_audit();
CREATE TRIGGER trig_across_the_board_rule_update
    AFTER UPDATE OR DELETE OR INSERT ON across_the_board_rule
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_child_audit();
-- change sourcing of max_last_updated_date
DROP VIEW vwd_fund_config;
CREATE VIEW vwd_fund_config AS
SELECT
    cfg.id,
    cfg.client_id,
    cfg.version_year,
    cfg.version_number,
    cfg.config_name,
    cfg.description AS config_description,
    cfg.fund_config_status,
    cfg.fund_data_source_environment_id AS fund_data_source_env_id, 
    cfg.created_user_id, 
    cfg.created_date, 
    cfg.last_updated_user_id,
    cfg.last_updated_date,
    source_cfg.id AS source_id,
    source_cfg.version_year AS source_version_year,
    source_cfg.version_number AS source_version_number,
    source_cfg.config_name AS source_config_name,
    source_cfg.fund_config_status AS source_fund_config_status,
    source_cfg.fund_data_source_environment_id AS source_fund_data_source_env_id, 
    source_cfg.created_user_id AS source_created_user_id, 
    source_cfg.created_date AS source_created_date, 
    source_cfg.last_updated_user_id AS source_last_updated_user_id, 
    source_cfg.last_updated_date AS source_last_updated_date,
    created_user.first_name AS created_user_first_name,
    created_user.last_name AS created_user_last_name,
    updated_user.first_name AS updated_user_first_name,
    updated_user.last_name AS updated_user_last_name,
    source_created_user.first_name AS source_created_user_first_name,
    source_created_user.last_name AS source_created_user_last_name,
    source_updated_user.first_name AS source_updated_user_first_name,
    source_updated_user.last_name AS source_updated_user_last_name,
    COALESCE((SELECT MAX(created_date) FROM fund_config_child_audit fcca WHERE fcca.fund_config_id = cfg.id), to_date('0001-01-01', 'YYYY-MM-DD')) AS max_last_updated_date
FROM
    fund_config cfg
INNER JOIN
	system_user created_user
ON
	cfg.created_user_id = created_user.id
LEFT OUTER JOIN
	system_user updated_user
ON
	cfg.last_updated_user_id = updated_user.id
LEFT JOIN
    fund_config source_cfg
ON 
    cfg.source_id = source_cfg.id
    AND cfg.client_id = source_cfg.client_id
LEFT JOIN
	system_user source_created_user
ON
	source_cfg.created_user_id = source_created_user.id
LEFT JOIN
	system_user source_updated_user
ON
	source_cfg.last_updated_user_id = source_updated_user.id;
COMMENT ON VIEW vwd_fund_config IS 'View to add useful info to fund_config records';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'6.0003','Update Max Last Updated Date On Vwd Fund Config','SQL','Major0006/V6.0003__Update_Max_Last_Updated_Date_On_Vwd_Fund_Config.sql',1111768240,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 6.0004
-- --------------------------------------------------------------------
DROP TABLE fund_config_cmp_result;
DROP TABLE fund_config_cmp_result_header;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'6.0004','Comparison Cleanup','SQL','Major0006/V6.0004__Comparison_Cleanup.sql',1028120072,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0000
-- --------------------------------------------------------------------
ALTER TABLE fundset_fund DROP CONSTRAINT pk_fundset_fund;
ALTER TABLE fundset_fund DROP CONSTRAINT fk_fundset_fund_fundset;
ALTER TABLE fundset_fund DROP CONSTRAINT unq_fundset_fund_fundset_fund;
ALTER TABLE fundset DROP CONSTRAINT pk_fundset;
ALTER TABLE fundset DROP CONSTRAINT unq_fundset_fund_config_name;
-- fundset_fund to set_fund and renaming its fundset_id column
ALTER TABLE fundset_fund RENAME TO set_fund;
ALTER TABLE set_fund RENAME fundset_id TO set_id;
ALTER TABLE fundset RENAME TO set;
ALTER TABLE set ADD COLUMN type VARCHAR(6);
-- set the default value
UPDATE set SET type = 'FUND';
ALTER TABLE set ALTER COLUMN type SET NOT NULL;
ALTER TABLE set ADD CONSTRAINT pk_set PRIMARY KEY (id);
ALTER TABLE set ADD CONSTRAINT unq_set_fund_config_name UNIQUE (fund_config_id, name);
ALTER TABLE set ADD CONSTRAINT chk_set_type CHECK (type in ('FUND', 'CLASS'));
ALTER TABLE set_fund ADD CONSTRAINT pk_set_fund PRIMARY KEY (id);
ALTER TABLE set_fund ADD CONSTRAINT fk_set_fund_set FOREIGN KEY (set_id) REFERENCES set(id);
ALTER TABLE set_fund ADD CONSTRAINT unq_set_fund_set_fund_code UNIQUE (set_id, fund_code);
CREATE TABLE set_class (
	id BIGSERIAL CONSTRAINT pk_set_class PRIMARY KEY,
	set_id BIGINT NOT NULL CONSTRAINT fk_set_class_set REFERENCES set(id),
	class_code VARCHAR(2) NOT NULL
);
ALTER TABLE set_class ADD CONSTRAINT unq_set_class_set_code UNIQUE (set_id, class_code);
COMMENT ON TABLE set IS 'The header for sets';
COMMENT ON TABLE set_fund IS 'Members of a set of funds';
COMMENT ON TABLE set_class IS 'Members of a set of classes';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0000','Add set related tables','SQL','Major0007/V7.0000__Add_set_related_tables.sql',393246257,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0001
-- --------------------------------------------------------------------
ALTER TABLE set DROP CONSTRAINT chk_set_type;
ALTER TABLE set ALTER COLUMN type SET DATA TYPE VARCHAR(16);
UPDATE set SET type = 'FUND_SET' WHERE type = 'FUND';
UPDATE set SET type = 'CLASS_SET' WHERE type = 'CLASS';
ALTER TABLE set ADD CONSTRAINT chk_set_type CHECK (type in ('FUND_SET', 'CLASS_SET'));

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0001','rename set types','SQL','Major0007/V7.0001__rename_set_types.sql',823646679,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0002
-- --------------------------------------------------------------------
ALTER TABLE system_user ADD COLUMN environments VARCHAR(512);
ALTER TABLE system_user ADD COLUMN allowed BOOLEAN NOT NULL DEFAULT FALSE;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0002','add user environments and allowed','SQL','Major0007/V7.0002__add_user_environments_and_allowed.sql',-157349039,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0003
-- --------------------------------------------------------------------
INSERT INTO across_the_board_rule_type VALUES ('ALLOW_SWITCHES_FROM_DCAF_FUNDS');
ALTER TABLE across_the_board_rule DROP CONSTRAINT chk_across_the_board_rule_typeandvalue;
ALTER TABLE across_the_board_rule ADD CONSTRAINT chk_across_the_board_rule_typeandvalue
CHECK (
        (rule_type = 'DISALLOW_SWITCHES_INTO_PURCHASE_CAPPED_FUND_CLASSES' AND rule_value IN ('YES', 'NO', 'DISALLOW_EXCEPT_WITHIN_SAME_CLASS', 'DISALLOW_EXCEPT_WITHIN_SAME_FUND'))
                OR
        (rule_type = 'ALLOW_IN_KIND_TRANSFERS' AND rule_value IN ('ALWAYS', 'NOT_NECESSARILY'))
                OR
        (rule_type = 'DISALLOW_ALL_SWITCHES_ACROSS_SPONSORS' AND rule_value IN ('YES', 'NO'))
                OR
        (rule_type = 'ALLOW_SWITCHES_FROM_DCAF_FUNDS' AND rule_value = 'ALWAYS')
);
INSERT INTO across_the_board_rule (client_id, fund_config_id, rule_type, rule_value, created_user_id, created_date, last_updated_user_id, last_updated_date)
	SELECT dt.client_id, dt.fund_config_id, 'ALLOW_SWITCHES_FROM_DCAF_FUNDS', 'ALWAYS', MIN(dt.created_user_id), MIN(dt.created_date), MIN(dt.created_user_id), MIN(dt.created_date)
		FROM dcaf_transfer dt GROUP BY client_id, fund_config_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0003','add dcaf across the board rule type','SQL','Major0007/V7.0003__add_dcaf_across_the_board_rule_type.sql',1921189824,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0004
-- --------------------------------------------------------------------
-- CAT-208
DROP VIEW vwd_fundset_fund;
-- added fund_id
CREATE VIEW vwd_fundset_fund
	AS
SELECT 
    s.id || '|' || s.fund_config_id || '|' || sf.fund_code as id,
	s.id as fund_set_id, 
	s.fund_config_id,
	f.id as fund_id,
	f.fund_code, 
	f.en_short_display_name, 
	f.en_med_display_name, 
	f.en_long_display_name, 
	f.fr_short_display_name, 
	f.fr_med_display_name, 
	f.fr_long_display_name,
	f.fund_sponsor,
	f.fund_category_desc,
	f.effective_date,
	f.stop_date
FROM set s
INNER JOIN set_fund sf ON s.id = sf.set_id
INNER JOIN fund f ON sf.fund_code = f.fund_code AND f.fund_config_id = s.fund_config_id;
COMMENT ON VIEW vwd_fundset_fund IS 'This view displayw fund data for funds in a fund set.';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0004','add id to vw fundset fund','SQL','Major0007/V7.0004__add_id_to_vw_fundset_fund.sql',-1716074857,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0005
-- --------------------------------------------------------------------
--CAT-268: change how we calculate max last updated date and provide the user associated with it 
-- rename audit table to remove word child as fund_config itself will also be audited
ALTER TABLE fund_config_child_audit DROP CONSTRAINT pk_fund_config_child_audit;
ALTER TABLE fund_config_child_audit DROP CONSTRAINT fk_fund_config_child_audit_fundcfg;
ALTER TABLE fund_config_child_audit RENAME TO fund_config_audit;
ALTER TABLE fund_config_audit ADD CONSTRAINT pk_fund_config_audit PRIMARY KEY (id);
ALTER TABLE fund_config_audit ADD CONSTRAINT fk_fund_config_audit_fundcfg FOREIGN KEY (fund_config_id) REFERENCES fund_config(id);
-- add last updated user and updated table name to audit table and trigger function that populates it (and rename function)
DELETE FROM fund_config_audit;
ALTER TABLE fund_config_audit ADD COLUMN created_user_id BIGINT NOT NULL CONSTRAINT fk_fund_config_audit_created_by REFERENCES system_user(id);
ALTER TABLE fund_config_audit ADD COLUMN table_name VARCHAR(512) NOT NULL;
ALTER TABLE fund_config_audit ADD COLUMN action VARCHAR(10) NOT NULL;
CREATE INDEX idx_fund_config_audit_fc_date_user on fund_config_audit (fund_config_id, created_date, created_user_id);
COMMENT ON INDEX idx_fund_config_audit_fc_date_user IS 'Index for performance of vw_fund_config_audit_max use of this table';
DROP TRIGGER trig_transfer_rule_override_update ON transfer_rule_override;
DROP TRIGGER trig_not_allowed_rule_update ON not_allowed_rule;
DROP TRIGGER trig_across_the_board_rule_update ON across_the_board_rule;
DROP FUNCTION fn_insert_fund_config_child_audit();
CREATE FUNCTION fn_insert_fund_config_audit() RETURNS TRIGGER AS $$
    DECLARE
        fund_config_id bigint;
    BEGIN
         IF (TG_OP = 'DELETE') THEN
         	IF (TG_TABLE_NAME = 'fund_config') THEN fund_config_id = OLD.id; ELSE fund_config_id = OLD.fund_config_id; END IF;
     		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), OLD.last_updated_user_id);
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
        	IF (TG_TABLE_NAME = 'fund_config') THEN fund_config_id = NEW.id; ELSE fund_config_id = NEW.fund_config_id; END IF;
      		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), NEW.last_updated_user_id);
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
        	IF (TG_TABLE_NAME = 'fund_config') THEN fund_config_id = NEW.id; ELSE fund_config_id = NEW.fund_config_id; END IF;
     		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), NEW.last_updated_user_id);
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$$ LANGUAGE plpgsql;
COMMENT ON FUNCTION fn_insert_fund_config_audit() IS 'Insert a row in the fund config audit table based on incoming change';
-- add triggers on relevant tables
CREATE TRIGGER trig_transfer_rule_override_update
    AFTER UPDATE OR DELETE OR INSERT ON transfer_rule_override
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_audit();
CREATE TRIGGER trig_not_allowed_rule_update
    AFTER UPDATE OR DELETE OR INSERT ON not_allowed_rule
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_audit();
CREATE TRIGGER trig_across_the_board_rule_update
    AFTER UPDATE OR DELETE OR INSERT ON across_the_board_rule
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_audit();
CREATE TRIGGER trig_fund_config_update
    AFTER UPDATE OR DELETE OR INSERT ON fund_config
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_audit();
-- View to provide user and date for last change to a fund config
CREATE VIEW vw_fund_config_audit_max AS
SELECT 
	MAX(fca.created_user_id) created_user_id, fca.created_date, fca.fund_config_id
FROM fund_config_audit fca,
     (SELECT MAX(created_date) as created_date, fund_config_id FROM fund_config_audit GROUP BY fund_config_id) as fca2
        WHERE fca.created_date = fca2.created_date AND fca.fund_config_id = fca2.fund_config_id
        GROUP BY fca.created_date, fca.fund_config_id;
COMMENT ON VIEW vw_fund_config_audit_max IS 'Determine max date and matching user id for a fund config on fund config audit table';
-- change calculation of max_last_updated_date
DROP VIEW vwd_fund_config;
CREATE VIEW vwd_fund_config AS
SELECT
    cfg.id,
    cfg.client_id,
    cfg.version_year,
    cfg.version_number,
    cfg.config_name,
    cfg.description AS config_description,
    cfg.fund_config_status,
    cfg.fund_data_source_environment_id AS fund_data_source_env_id, 
    cfg.created_user_id, 
    cfg.created_date, 
    cfg.last_updated_user_id,
    cfg.last_updated_date,
    source_cfg.id AS source_id,
    source_cfg.version_year AS source_version_year,
    source_cfg.version_number AS source_version_number,
    source_cfg.config_name AS source_config_name,
    source_cfg.fund_config_status AS source_fund_config_status,
    source_cfg.fund_data_source_environment_id AS source_fund_data_source_env_id, 
    source_cfg.created_user_id AS source_created_user_id, 
    source_cfg.created_date AS source_created_date, 
    source_cfg.last_updated_user_id AS source_last_updated_user_id, 
    source_cfg.last_updated_date AS source_last_updated_date,
    created_user.first_name AS created_user_first_name,
    created_user.last_name AS created_user_last_name,
    updated_user.first_name AS updated_user_first_name,
    updated_user.last_name AS updated_user_last_name,
    source_created_user.first_name AS source_created_user_first_name,
    source_created_user.last_name AS source_created_user_last_name,
    source_updated_user.first_name AS source_updated_user_first_name,
    source_updated_user.last_name AS source_updated_user_last_name,
    fc_audit_max.created_date AS max_last_updated_date,
    fc_audit_max.created_user_id AS max_last_updated_user_id,
    max_last_updated_user.first_name AS max_last_updated_user_first_name,
    max_last_updated_user.last_name AS max_last_updated_user_last_name
 FROM
    fund_config cfg
INNER JOIN
	system_user created_user
ON
	cfg.created_user_id = created_user.id
LEFT OUTER JOIN
	system_user updated_user
ON
	cfg.last_updated_user_id = updated_user.id
LEFT JOIN
    fund_config source_cfg
ON 
    cfg.source_id = source_cfg.id
    AND cfg.client_id = source_cfg.client_id
LEFT JOIN
	system_user source_created_user
ON
	source_cfg.created_user_id = source_created_user.id
LEFT JOIN
	system_user source_updated_user
ON
	source_cfg.last_updated_user_id = source_updated_user.id
LEFT JOIN
	vw_fund_config_audit_max fc_audit_max
ON
	cfg.id = fc_audit_max.fund_config_id
LEFT JOIN
	system_user max_last_updated_user
ON
	fc_audit_max.created_user_id = max_last_updated_user.id
;
COMMENT ON VIEW vwd_fund_config IS 'View to add useful info to fund_config records';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0005','fund config last updated info changes','SQL','Major0007/V7.0005__fund_config_last_updated_info_changes.sql',1898099584,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0006
-- --------------------------------------------------------------------
-- CAT-208 - Auditing changes to fund sets
-- This function used to insert audit records for modification to sets.  Set contents don't have fund configuration or user information, so we need to query the parent set record.  
CREATE FUNCTION fn_insert_fund_config_audit_for_set_changes() RETURNS TRIGGER AS $$
    DECLARE
        _fund_config_id bigint;
        _last_updated_user_id bigint;
    BEGIN
         IF (TG_OP = 'DELETE') THEN
         	SELECT fund_config_id, last_updated_user_id into _fund_config_id, _last_updated_user_id from set where id = OLD.set_id;
     		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (_fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), _last_updated_user_id);
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
           	SELECT fund_config_id, last_updated_user_id into _fund_config_id, _last_updated_user_id from set where id = NEW.set_id;
      		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (_fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), _last_updated_user_id);
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
           	SELECT fund_config_id, last_updated_user_id into _fund_config_id, _last_updated_user_id from set where id = NEW.set_id;
     		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (_fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), _last_updated_user_id);
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$$ LANGUAGE plpgsql;
COMMENT ON FUNCTION fn_insert_fund_config_audit_for_set_changes() IS 'Insert a row in the fund config audit table based on changes to a set';
-- audit changes to the set record
CREATE TRIGGER trig_set_update
    AFTER UPDATE OR DELETE OR INSERT ON set
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_audit();
-- audit changes to fund set contents    
CREATE TRIGGER trig_set_fund_update
	AFTER UPDATE OR DELETE OR INSERT ON set_fund
	FOR EACH ROW
	EXECUTE PROCEDURE fn_insert_fund_config_audit_for_set_changes();

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0006','audit fund set changes','SQL','Major0007/V7.0006__audit_fund_set_changes.sql',42386039,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0007
-- --------------------------------------------------------------------
-- CAT-208 - Auditing changes to fund sets; Dropping and recreating function and trigger to give better names
DROP TRIGGER trig_set_fund_update on set_fund;
DROP FUNCTION fn_insert_fund_config_audit_for_set_changes();
-- This function used to insert audit records for modification to sets.  Set contents don't have fund configuration or user information, so we need to query the parent set record.  
CREATE FUNCTION fn_insert_fund_config_audit_for_set_member_changes() RETURNS TRIGGER AS $$
    DECLARE
        _fund_config_id bigint;
        _last_updated_user_id bigint;
    BEGIN
         IF (TG_OP = 'DELETE') THEN
         	SELECT fund_config_id, last_updated_user_id into _fund_config_id, _last_updated_user_id from set where id = OLD.set_id;
     		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (_fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), _last_updated_user_id);
            RETURN OLD;
        ELSIF (TG_OP = 'UPDATE') THEN
           	SELECT fund_config_id, last_updated_user_id into _fund_config_id, _last_updated_user_id from set where id = NEW.set_id;
      		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (_fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), _last_updated_user_id);
            RETURN NEW;
        ELSIF (TG_OP = 'INSERT') THEN
           	SELECT fund_config_id, last_updated_user_id into _fund_config_id, _last_updated_user_id from set where id = NEW.set_id;
     		INSERT INTO fund_config_audit (fund_config_id, table_name, action, created_date, created_user_id) values (_fund_config_id, TG_TABLE_NAME, TG_OP, clock_timestamp(), _last_updated_user_id);
            RETURN NEW;
        END IF;
        RETURN NULL; -- result is ignored since this is an AFTER trigger
    END;
$$ LANGUAGE plpgsql;
COMMENT ON FUNCTION fn_insert_fund_config_audit_for_set_member_changes() IS 'Insert a row in the fund config audit table based on changes to a set';
-- audit changes to fund set contents    
CREATE TRIGGER trig_set_fund_update
	AFTER UPDATE OR DELETE OR INSERT ON set_fund
	FOR EACH ROW
	EXECUTE PROCEDURE fn_insert_fund_config_audit_for_set_member_changes();
-- audit changes to class set contents    
CREATE TRIGGER trig_set_fund_update
	AFTER UPDATE OR DELETE OR INSERT ON set_class
	FOR EACH ROW
	EXECUTE PROCEDURE fn_insert_fund_config_audit_for_set_member_changes();

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0007','audit set changes','SQL','Major0007/V7.0007__audit_set_changes.sql',1986811319,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 7.0008
-- --------------------------------------------------------------------
-- CAT-208 - Auditing changes to fund sets; Dropping and recreating triggers
COMMENT ON FUNCTION fn_insert_fund_config_audit_for_set_member_changes() IS 'Insert a row in the fund config audit table based on changes to set members';
DROP TRIGGER trig_set_fund_update on set_fund;
-- audit changes to fund set contents    
CREATE TRIGGER trig_set_fund_update
	AFTER UPDATE OR DELETE OR INSERT ON set_fund
	FOR EACH ROW
	EXECUTE PROCEDURE fn_insert_fund_config_audit_for_set_member_changes();
-- audit changes to class set contents    
CREATE TRIGGER trig_set_class_update
	AFTER UPDATE OR DELETE OR INSERT ON set_class
	FOR EACH ROW
	EXECUTE PROCEDURE fn_insert_fund_config_audit_for_set_member_changes();

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'7.0008','audit set changes','SQL','Major0007/V7.0008__audit_set_changes.sql',-1558243240,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0000
-- --------------------------------------------------------------------
ALTER TABLE set DROP CONSTRAINT chk_set_type;
ALTER TABLE set ADD CONSTRAINT chk_set_type CHECK (type in ('FUND_SET', 'CLASS_SET', 'FUND_CLASS_SET'));
CREATE TABLE set_fund_class (
	id BIGSERIAL CONSTRAINT pk_set_fund_class PRIMARY KEY,
	set_id BIGINT NOT NULL CONSTRAINT fk_set_fund_class_set REFERENCES set(id),
	fund_code VARCHAR(10) NOT NULL,
	class_code VARCHAR(2) NOT NULL
);
COMMENT ON TABLE set_fund_class IS 'Members of a set of fund-classes';
ALTER TABLE set_fund_class ADD CONSTRAINT unq_set_fund_class_fund_class UNIQUE (set_id, fund_code, class_code);
-- Audit changes to fundclass set contents    
CREATE TRIGGER trig_set_fund_class_update
	AFTER UPDATE OR DELETE OR INSERT ON set_fund_class
	FOR EACH ROW
	EXECUTE PROCEDURE fn_insert_fund_config_audit_for_set_member_changes();

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0000','Add fundclass set table','SQL','Major0008/V8.0000__Add_fundclass_set_table.sql',1500138658,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0001
-- --------------------------------------------------------------------
-- CAT-207
CREATE VIEW vwd_classset_class AS
SELECT 
    s.id || '|' || s.fund_config_id || '|' || sc.class_code as id,
	s.id as class_set_id, 
	s.fund_config_id,
	c.id as class_id,
	c.class_code, 
	c.en_display_name, 
	c.fr_display_name 
FROM set s
INNER JOIN set_class sc ON s.id = sc.set_id
INNER JOIN class c ON sc.class_code = c.class_code AND c.fund_config_id = s.fund_config_id;
COMMENT ON VIEW vwd_classset_class IS 'This view displays class data for classes in a class set.';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0001','create classset view','SQL','Major0008/V8.0001__create_classset_view.sql',-425170023,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0002
-- --------------------------------------------------------------------
-- CAT-247
-- Create RuleException table
CREATE TABLE not_allowed_rule_exception (
	not_allowed_rule_exception  VARCHAR(25) CONSTRAINT pk_not_allowed_rule_exception PRIMARY KEY
);
-- Insert rule exceptions
INSERT INTO not_allowed_rule_exception (not_allowed_rule_exception) VALUES ('EXCEPT_WITHIN_FUND');
INSERT INTO not_allowed_rule_exception (not_allowed_rule_exception) VALUES ('EXCEPT_WITHIN_CLASS');
INSERT INTO not_allowed_rule_exception (not_allowed_rule_exception) VALUES ('EXCEPT_WITHIN_FUND_SET');
INSERT INTO not_allowed_rule_exception (not_allowed_rule_exception) VALUES ('EXCEPT_WITHIN_CLASS_SET');
INSERT INTO not_allowed_rule_exception (not_allowed_rule_exception) VALUES ('EXCEPT_IN_KIND');
-- Add rule_exception column to not_allowed_rule
ALTER TABLE not_allowed_rule 
	ADD COLUMN rule_exception varchar(25) 
	CONSTRAINT fk_not_allowed_rule_rule_exception REFERENCES not_allowed_rule_exception (not_allowed_rule_exception);
COMMENT ON COLUMN not_allowed_rule.rule_exception IS 'Represents an that exception to the NA rule. If null, no exceptions applied';
-- Add constraint to not_allowed_rule.rule_exception so that only TYPE1 can have a rule_exception (CAT-257)
ALTER TABLE not_allowed_rule ADD CONSTRAINT chk_not_allowed_rule_rule_exception
	CHECK (
		(rule_type = 'TYPE1')
		or
		(rule_type <> 'TYPE1' AND rule_exception IS NULL)
	);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0002','add NAR exceptions for RT1','SQL','Major0008/V8.0002__add_NAR_exceptions_for_RT1.sql',2005297412,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0003
-- --------------------------------------------------------------------
-- CAT-247
COMMENT ON TABLE not_allowed_rule_exception IS 'Enum table that represents the allowed values for a not allowed rule exception';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0003','add NAR exceptions comments','SQL','Major0008/V8.0003__add_NAR_exceptions_comments.sql',-485744163,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0004
-- --------------------------------------------------------------------
ALTER TABLE fund_class ADD COLUMN isin VARCHAR(20), ADD COLUMN english_description VARCHAR(24), ADD COLUMN french_description VARCHAR(24);
COMMENT ON COLUMN fund_class.isin IS 'This data is sourced from Progress(FundIdentifier.IDValue) where FundIdentifier joined on Fund-Detl on fund and class and FundIdentifier.IDType is ISIN';
COMMENT ON COLUMN fund_class.english_description IS 'This data is sourced from Progress(Fund-Detl.Classe)';
COMMENT ON COLUMN fund_class.french_description IS 'This data is sourced from Progress(Fund-Detl.Classf)';

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0004','Add Description and isin columns to fundclass','SQL','Major0008/V8.0004__Add_Description_and_isin_columns_to_fundclass.sql',1329617927,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0005
-- --------------------------------------------------------------------
-- Added: isin, fund_class_en_description and fund_class_fr_description to view
DROP VIEW vwd_fund_class;
CREATE OR REPLACE VIEW vwd_fund_class AS
SELECT
	fc.id,
	fc.client_id,
 	fc.fund_config_id,
	fc.fund_id,
	f.fund_code,
	f.english_name_short AS fund_en_name_short,   
	f.french_name_short AS fund_fr_name_short,
	f.english_name_medium AS fund_en_name_medium,
	f.french_name_medium AS fund_fr_name_medium,
	f.english_name_long AS fund_en_name_long,
	f.french_name_long AS fund_fr_name_long,
	f.en_short_display_name AS fund_en_short_display_name,
	f.fr_short_display_name AS fund_fr_short_display_name,
	f.en_med_display_name AS fund_en_med_display_name,
	f.fr_med_display_name AS fund_fr_med_display_name,
	f.en_long_display_name AS fund_en_long_display_name,
	f.fr_long_display_name AS fund_fr_long_display_name,
	fc.class_id,
	c.class_code,
	c.english_name AS class_en_name,
	c.french_name AS class_fr_name,
	c.en_display_name AS class_en_display_name,
	c.fr_display_name AS class_fr_display_name,
 	fc.name AS fund_class_name,
 	fc.english_description AS fund_class_en_description,
 	fc.french_description AS fund_class_fr_description,
 	fc.fundserv_code,
 	fc.isin
FROM
	fund_class fc
	INNER JOIN fund f  ON f.id = fc.fund_id
	INNER JOIN class c ON c.id = fc.class_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0005','Add isin descriptions to vwd fund class','SQL','Major0008/V8.0005__Add_isin_descriptions_to_vwd_fund_class.sql',1375331508,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0006
-- --------------------------------------------------------------------
-- CAT-209
CREATE VIEW vwd_set_fund_class AS
SELECT
	s.id || '|' || s.fund_config_id || '|' || fc.id || '|' || f.fund_code || '|' || c.class_code as id,
	s.id as fund_class_set_id,
	s.fund_config_id,
	f.id as fund_id,
	f.fund_code,
	f.english_name_short as fund_english_name_short,
	f.french_name_short as fund_french_name_short,
	f.english_name_medium as fund_english_name_medium,
	f.french_name_medium as fund_french_name_medium,
	f.english_name_long as fund_english_name_long,
	f.french_name_long as fund_french_name_long,
	f.en_short_display_name as fund_en_short_display_name,
	f.fr_short_display_name as fund_fr_short_display_name,
	f.en_med_display_name as fund_en_med_display_name,
	f.fr_med_display_name as fund_fr_med_display_name,
	f.en_long_display_name as fund_en_long_display_name,
	f.fr_long_display_name as fund_fr_long_display_name,
	c.id as class_id,
	c.class_code,
	c.english_name as class_english_name,
	c.french_name as class_french_name,
	c.en_display_name as class_en_display_name,
	c.fr_display_name as class_fr_display_name,
	fc.id as fund_class_id,
	fc.fundserv_code,
	fc.isin,
	fc.english_description as fund_class_english_description,
	fc.french_description as fund_class_french_description
FROM SET s
INNER JOIN set_fund_class sfc ON s.id = sfc.set_id
INNER JOIN fund f ON sfc.fund_code = f.fund_code AND f.fund_config_id = s.fund_config_id
INNER JOIN class c ON sfc.class_code = c.class_code AND c.fund_config_id = s.fund_config_id
INNER JOIN fund_class fc ON fc.fund_id = f.id AND fc.class_id = c.id AND fc.fund_config_id = s.fund_config_id;
COMMENT ON VIEW vwd_set_fund_class IS 'This view displays fund, class and fund_class data for the members of a fundclass set.';
-- Rename set views 
ALTER VIEW vwd_fundset_fund RENAME TO vwd_set_fund;
ALTER VIEW vwd_classset_class RENAME TO vwd_set_class;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0006','create fundclass set view','SQL','Major0008/V8.0006__create_fundclass_set_view.sql',-1417766076,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0007
-- --------------------------------------------------------------------
CREATE TABLE compare_cache_header (
	id BIGSERIAL CONSTRAINT pk_compare_cache_header PRIMARY KEY,
	base_env_adapter_id BIGINT NOT NULL CONSTRAINT fk_compare_cache_header_env_adapter REFERENCES environment_adapter(id),
	changed_fund_config_id BIGINT NOT NULL CONSTRAINT fk_compare_cache_header_fund_config REFERENCES fund_config(id),
	processing BOOLEAN NOT NULL,
	created_user_id BIGINT NOT NULL CONSTRAINT fk_compare_cache_header_sys_user REFERENCES system_user(id),
	created_date TIMESTAMP NOT NULL
);
COMMENT ON TABLE compare_cache_header IS 'Header table for cached configuration comparison results.';
CREATE UNIQUE INDEX unq_compare_cache_header ON compare_cache_header(base_env_adapter_id, changed_fund_config_id, created_user_id);
CREATE TABLE compare_cache_transfer (
	id BIGSERIAL CONSTRAINT pk_compare_cache_transfer PRIMARY KEY,
	compare_cache_header_id BIGINT NOT NULL CONSTRAINT fk_compare_cache_transfer_compare_cache_header REFERENCES compare_cache_header(id),
	type VARCHAR(10) NOT NULL,
	from_fund_code VARCHAR(10) NOT NULL,
	from_class_code VARCHAR(2) NOT NULL,
	to_fund_code VARCHAR(10) NOT NULL,
	to_class_code VARCHAR(2) NOT NULL
);
COMMENT ON TABLE compare_cache_transfer IS 'Cached potential transfers for ADDS, DELETES and UPDATES.';
CREATE UNIQUE INDEX unq_compare_cache_transfer ON compare_cache_transfer(compare_cache_header_id, from_fund_code, from_class_code, to_fund_code, to_class_code);
ALTER TABLE compare_cache_transfer ADD CONSTRAINT chk_compare_cache_transfer_type
	CHECK (type in ('ADD', 'UPDATE', 'DELETE'));
CREATE TABLE compare_cache_transfer_attribute (
	id BIGSERIAL CONSTRAINT pk_cache_transfer_attribute PRIMARY KEY,
	compare_cache_transfer_id BIGINT NOT NULL CONSTRAINT fk_cache_transfer_attribute_compare_cache_transfer REFERENCES compare_cache_transfer(id),
	new_money BOOLEAN NOT NULL,
	online_transfer VARCHAR(25) NOT NULL,
	automatic_transfer VARCHAR(25) NOT NULL,
	short_term_fee BOOLEAN NOT NULL,
	rebalancing BOOLEAN NOT NULL,
	targetunits VARCHAR(12) NOT NULL,
	tradeallowed VARCHAR(25) NOT NULL
);
COMMENT ON TABLE compare_cache_transfer_attribute IS 'Cached potential transfers for ADDS, DELETES and UPDATES.';
ALTER TABLE compare_cache_transfer_attribute 
	ADD CONSTRAINT chk_compare_cache_transfer_attribute_online_transfer CHECK (online_transfer in ('BOTH', 'PARTIAL_ONLY', 'FULL_ONLY')),
	ADD CONSTRAINT chk_compare_cache_transfer_attribute_automatic_transfer CHECK (automatic_transfer in ('BOTH', 'PARTIAL_ONLY', 'FULL_ONLY')),
	ADD CONSTRAINT chk_compare_cache_transfer_attribute_trade_allowed CHECK (tradeallowed in ('ALL_INTERFACES','NOT_FUNDSERV','FUNDSERV_ONLY'))
;
CREATE UNIQUE INDEX unq_compare_cache_transfer_attribute ON compare_cache_transfer_attribute(compare_cache_transfer_id);
CREATE TABLE compare_cache_fund (
	id BIGSERIAL CONSTRAINT pk_compare_cache_fund PRIMARY KEY,
	compare_cache_header_id BIGINT NOT NULL CONSTRAINT fk_compare_cache_fund_compare_cache_header REFERENCES compare_cache_header(id),
	fund_code VARCHAR(12) NOT NULL,
	english_name_short VARCHAR(16),
	english_name_medium VARCHAR(40),
	english_name_long VARCHAR(160),
	french_name_short VARCHAR(16),
	french_name_medium VARCHAR(40),
	french_name_long VARCHAR(160),
	en_short_display_name VARCHAR(32) NOT NULL,
	en_med_display_name VARCHAR(64) NOT NULL,
	en_long_display_name VARCHAR(160),
	fr_short_display_name VARCHAR(32) NOT NULL,
	fr_med_display_name VARCHAR(64) NOT NULL
);
COMMENT ON TABLE compare_cache_fund IS 'Cached iFast funds used for display purposes in the compare UI.';
CREATE UNIQUE INDEX unq_compare_cache_fund ON compare_cache_fund(compare_cache_header_id, fund_code);
CREATE TABLE compare_cache_class (
	id BIGSERIAL CONSTRAINT pk_compare_cache_class PRIMARY KEY,
	compare_cache_header_id BIGINT NOT NULL CONSTRAINT fk_compare_cache_class_compare_cache_header REFERENCES compare_cache_header(id),
	class_code VARCHAR(2) NOT NULL,
	english_name VARCHAR(80),
	french_name VARCHAR(80),
	en_display_name VARCHAR(100) NOT NULL,
	fr_dispaly_name VARCHAR(100) NOT NULL
);
COMMENT ON TABLE compare_cache_class IS 'Cached iFast classes used for display purposes in the compare UI.';
CREATE UNIQUE INDEX unq_compare_cache_class ON compare_cache_class(compare_cache_header_id, class_code);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0007','create comparison cache','SQL','Major0008/V8.0007__create_comparison_cache.sql',-757387099,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0008
-- --------------------------------------------------------------------
ALTER TABLE compare_cache_transfer_attribute RENAME COLUMN targetunits TO target_units;
ALTER TABLE compare_cache_transfer_attribute RENAME COLUMN tradeallowed TO trade_allowed;
ALTER TABLE compare_cache_fund ADD COLUMN fr_long_display_name VARCHAR(160);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0008','tweak comparison cache table','SQL','Major0008/V8.0008__tweak_comparison_cache_table.sql',1456273636,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 8.0009
-- --------------------------------------------------------------------
-- CAT-430 - Add allow cross currency switches to AtB rule types
INSERT INTO across_the_board_rule_type VALUES ('ALLOW_CROSS_CURRENCY_SWITCHES');
ALTER TABLE across_the_board_rule DROP CONSTRAINT chk_across_the_board_rule_typeandvalue;
ALTER TABLE across_the_board_rule ADD CONSTRAINT chk_across_the_board_rule_typeandvalue
CHECK (
        (rule_type = 'DISALLOW_SWITCHES_INTO_PURCHASE_CAPPED_FUND_CLASSES' AND rule_value IN ('YES', 'NO', 'DISALLOW_EXCEPT_WITHIN_SAME_CLASS', 'DISALLOW_EXCEPT_WITHIN_SAME_FUND'))
                OR
        (rule_type = 'ALLOW_IN_KIND_TRANSFERS' AND rule_value IN ('ALWAYS', 'NOT_NECESSARILY'))
                OR
        (rule_type = 'DISALLOW_ALL_SWITCHES_ACROSS_SPONSORS' AND rule_value IN ('YES', 'NO'))
                OR
        (rule_type = 'ALLOW_SWITCHES_FROM_DCAF_FUNDS' AND rule_value = 'ALWAYS')
                OR
        (rule_type = 'ALLOW_CROSS_CURRENCY_SWITCHES' AND rule_value = 'ALWAYS')
);

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'8.0009','add cross currency atb rule type','SQL','Major0008/V8.0009__add_cross_currency_atb_rule_type.sql',-1791764463,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 9.0000
-- --------------------------------------------------------------------
-- CAT-127
ALTER TABLE compare_cache_class RENAME COLUMN fr_dispaly_name TO fr_display_name;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'9.0000','RenameDisplayColumnOnCompareCacheClass','SQL','Major0009/V9.0000__RenameDisplayColumnOnCompareCacheClass.sql',-1886189021,'manual',current_timestamp,-1,true);
-- --------------------------------------------------------------------
-- REVISION: 9.0001
-- --------------------------------------------------------------------
-- create new table
CREATE TABLE fund_class_criterion (
	id BIGSERIAL CONSTRAINT pk_fund_class_criterion PRIMARY KEY,
	client_id BIGINT NOT NULL CONSTRAINT fk_fund_class_criterion_client REFERENCES client (id),
	fund_config_id BIGINT NOT NULL CONSTRAINT fk_fund_class_criterion_fc REFERENCES fund_config(id),
	fund_code VARCHAR(10),
	class_code VARCHAR(2),
	fundset_id BIGINT CONSTRAINT fk_fund_class_criterion_fundset REFERENCES set (id),
	classset_id BIGINT CONSTRAINT fk_fund_class_criterion_classset REFERENCES set (id),
	fundclassset_id BIGINT CONSTRAINT fk_fund_class_criterion_fundclassset REFERENCES set (id),
	default_specifier VARCHAR(10),
	created_user_id BIGINT NOT NULL CONSTRAINT fk_fund_class_criterion_created_by REFERENCES system_user(id),
	created_date TIMESTAMP NOT NULL,
	last_updated_user_id BIGINT NOT NULL CONSTRAINT fk_fund_class_criterion_last_updated_by REFERENCES system_user(id),
	last_updated_date TIMESTAMP NOT NULL
);
COMMENT ON TABLE fund_class_criterion IS 'Criterion for fund class combinations.';
ALTER TABLE fund_class_criterion ADD CONSTRAINT chk_fund_class_criterion_invalid_combination1 CHECK (
	fund_code IS NULL OR (fund_code IS NOT NULL AND fundset_id IS NULL) 
);
ALTER TABLE fund_class_criterion ADD CONSTRAINT chk_fund_class_criterion_invalid_combination2 CHECK (
	class_code IS NULL OR (class_code IS NOT NULL and classset_id IS NULL) 
);
ALTER TABLE fund_class_criterion ADD CONSTRAINT chk_fund_class_criterion_invalid_combination3 CHECK (
	fundclassset_id IS NULL OR (fundclassset_id IS NOT NULL AND fund_code IS NULL and class_code IS NULL and fundset_id IS NULL and classset_id IS NULL and default_specifier IS NULL) 
);
ALTER TABLE fund_class_criterion ADD CONSTRAINT chk_fund_class_criterion_invalid_combination4 CHECK (
	default_specifier IS NULL OR (default_specifier IS NOT NULL AND fund_code IS NULL and class_code IS NULL and fundset_id IS null and classset_id IS NULL and fundclassset_id IS NULL) 
);
ALTER TABLE fund_class_criterion ADD CONSTRAINT chk_fund_class_criterion_invalid_combination5 CHECK (
	fund_code IS NOT NULL or class_code IS NOT NULL or fundset_id IS NOT NULL OR classset_id IS NOT NULL OR fundclassset_id IS NOT NULL OR default_specifier IS NOT NULL 
);
ALTER TABLE fund_class_criterion ADD CONSTRAINT chk_fund_class_criterion_default_specifier CHECK (default_specifier IS NULL or default_specifier IN ('ALL', 'NOTHING'));
CREATE TRIGGER trig_fund_class_criterion_update
    AFTER UPDATE OR DELETE OR INSERT ON fund_class_criterion
    FOR EACH ROW
    EXECUTE PROCEDURE fn_insert_fund_config_audit();
-- replace box columns with fks to new table. OK to delete existing NAR rows at this point
DELETE FROM not_allowed_rule;
ALTER TABLE not_allowed_rule ADD COLUMN from_criterion_id BIGINT NOT NULL CONSTRAINT fk_na_rule_from_constraint REFERENCES fund_class_criterion (id);
ALTER TABLE not_allowed_rule ADD COLUMN from_except_criterion_id BIGINT NOT NULL CONSTRAINT fk_na_rule_from_except_constraint REFERENCES fund_class_criterion (id);
ALTER TABLE not_allowed_rule ADD COLUMN to_criterion_id  BIGINT NOT NULL CONSTRAINT fk_na_rule_to_constraint REFERENCES fund_class_criterion (id);
ALTER TABLE not_allowed_rule ADD COLUMN to_except_criterion_id BIGINT NOT NULL CONSTRAINT fk_na_rule_to_except_constraint REFERENCES fund_class_criterion (id);
CREATE UNIQUE INDEX unq_na_rule_from_criterion ON not_allowed_rule (from_criterion_id);
CREATE UNIQUE INDEX unq_na_rule_from_except_criterion ON not_allowed_rule (from_except_criterion_id);
CREATE UNIQUE INDEX unq_na_rule_to_criterion ON not_allowed_rule (to_criterion_id);
CREATE UNIQUE INDEX unq_na_rule_to_except_criterion ON not_allowed_rule (to_except_criterion_id);
ALTER TABLE not_allowed_rule DROP COLUMN left_input_box1_type;
ALTER TABLE not_allowed_rule DROP COLUMN left_input_box1_id;
ALTER TABLE not_allowed_rule DROP COLUMN left_input_box2_type;
ALTER TABLE not_allowed_rule DROP COLUMN left_input_box2_id;
ALTER TABLE not_allowed_rule DROP COLUMN right_input_box1_type;
ALTER TABLE not_allowed_rule DROP COLUMN right_input_box1_id;
ALTER TABLE not_allowed_rule DROP COLUMN right_input_box2_type;
ALTER TABLE not_allowed_rule DROP COLUMN right_input_box2_id;

INSERT INTO schema_version 
(version_rank, installed_rank, version, description, type, script, checksum, installed_by, installed_on, execution_time, success) 
 VALUES
((select coalesce(max(version_rank),0) from schema_version)+1,(select coalesce(max(installed_rank),0) from schema_version)+1,'9.0001','NAR refactor','SQL','Major0009/V9.0001__NAR_refactor.sql',1754144832,'manual',current_timestamp,-1,true);
commit;
----------------------------------------------------------------------

